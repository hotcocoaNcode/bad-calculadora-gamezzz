	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_drawPixelScale5
_drawPixelScale5:
	call	__frameset0
	ld	a, (ix + 12)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 6)
	ld	bc, 5
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	call	__imulu
	push	bc
	push	bc
	push	hl
	push	de
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_dist
_dist:
	ld	hl, -8
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	ld	(ix - 3), de
	ld	a, (ix + 15)
	ld	(ix - 4), a
	ld	bc, (ix + 18)
	ld	de, (ix + 24)
	ld	(ix - 7), de
	ld	a, (ix + 27)
	ld	(ix - 8), a
	ld	a, (ix + 21)
	ld	e, (ix + 9)
	call	__fsub
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 7)
	ld	a, (ix - 8)
	ld	hl, (ix - 3)
	ld	e, (ix - 4)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	ld	(ix - 3), bc
	ld	(ix - 4), a
	lea	bc, iy
	ld	a, d
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 3)
	ld	e, (ix - 4)
	call	__fadd
	ld	(ix + 6), bc
	ld	(ix + 9), a
	ld	sp, ix
	pop	ix
	jp	_sqrt
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawRays3D
_drawRays3D:
	ld	hl, -120
	call	__frameset
	ld	iy, 0
	ld	e, 64
	ld	d, iyh
	ld	bc, (_px)
	ld	a, (_px+3)
	lea	hl, iy
	call	__fmul
	ld	(ix - 18), bc
	ld	l, a
	ld	(ix - 21), hl
	ld	bc, (_py)
	ld	a, (_py+3)
	lea	hl, iy
	call	__fmul
	ld	(ix - 24), bc
	ld	l, a
	ld	(ix - 27), hl
	ld	bc, (_pa)
	ld	a, (_pa+3)
	ld	hl, 6837655
	ld	e, -66
	call	__fadd
	push	bc
	pop	iy
	lea	hl, iy
	ld	(ix - 3), a
	ld	e, a
	ld	bc, 0
	ld	a, d
	call	__fcmp
	jp	m, BB2_2
	ld	d, 0
	jr	BB2_3
BB2_2:
	ld	d, 1
BB2_3:
	ld	e, 64
	lea	bc, iy
	ld	a, (ix - 3)
	ld	hl, -3600432
	call	__fadd
	bit	0, d
	jr	nz, BB2_5
	lea	bc, iy
BB2_5:
	bit	0, d
	jr	nz, BB2_7
	ld	a, (ix - 3)
BB2_7:
	ld	hl, -3600432
	ld	e, 64
	push	bc
	pop	iy
	ld	(ix - 6), a
	call	__fcmp
	jp	m, BB2_9
	ld	d, 0
	jr	BB2_10
BB2_9:
	ld	d, 1
BB2_10:
	ld	a, (ix - 6)
	lea	bc, iy
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_12
	lea	bc, iy
BB2_12:
	ld	(ix - 3), bc
	ld	e, -72
	bit	0, d
	jr	nz, BB2_14
	ld	l, (ix - 6)
BB2_14:
	ld	(ix - 6), hl
	ld	bc, (ix - 24)
	ld	hl, (ix - 27)
	ld	a, l
	call	__ftol
	ld	(ix - 9), bc
	push	bc
	pop	hl
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	d, e
	call	__fadd
	push	bc
	pop	iy
	ld	e, a
	ld	bc, (ix - 24)
	ld	hl, (ix - 27)
	ld	a, l
	ld	(ix - 90), iy
	lea	hl, iy
	ld	(ix - 91), e
	call	__fsub
	ld	(ix - 94), bc
	ld	(ix - 95), a
	ld	hl, 64
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	add	hl, bc
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	iy
	ld	e, a
	ld	bc, (ix - 24)
	ld	hl, (ix - 27)
	ld	a, l
	ld	(ix - 98), iy
	lea	hl, iy
	ld	(ix - 99), e
	call	__fsub
	ld	(ix - 102), bc
	ld	(ix - 103), a
	ld	bc, (ix - 18)
	ld	hl, (ix - 21)
	ld	a, l
	call	__ftol
	ld	(ix - 9), bc
	push	bc
	pop	hl
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	e, d
	call	__fadd
	push	bc
	pop	iy
	ld	e, a
	ld	bc, (ix - 18)
	ld	hl, (ix - 21)
	ld	a, l
	ld	(ix - 112), iy
	lea	hl, iy
	ld	(ix - 113), e
	call	__fsub
	ld	(ix - 116), bc
	ld	(ix - 117), a
	ld	de, 64
	ld	hl, (ix - 9)
	add	hl, de
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 18)
	ld	iy, (ix - 21)
	ld	a, iyl
	ld	(ix - 66), hl
	ld	(ix - 67), e
	call	__fsub
	ld	(ix - 70), bc
	ld	(ix - 71), a
	ld	bc, (ix - 18)
	ld	hl, (ix - 21)
	ld	a, l
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fmul
	call	__ftol
	ld	(ix - 106), bc
	ld	bc, (ix - 24)
	ld	iy, (ix - 27)
	ld	a, iyl
	call	__fmul
	call	__ftol
	ld	(ix - 109), bc
	ld	de, 27
	ld	(ix - 12), bc
	ld	(ix - 15), bc
	push	hl
	pop	iy
	ld	bc, (ix - 3)
BB2_15:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB2_97
	ld	(ix - 54), iy
	ld	hl, (ix - 6)
	push	hl
	push	bc
	ld	(ix - 3), bc
	call	_tan
	pop	bc
	pop	bc
	ld	bc, -8388608
	ld	a, -65
	call	__fdiv
	ld	(ix - 30), bc
	ld	(ix - 36), a
	ld	hl, 4788176
	ld	a, 64
	ld	e, a
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	call	__fcmp
	jp	p, BB2_18
	ld	bc, (ix - 94)
	ld	a, (ix - 95)
	ld	hl, (ix - 30)
	push	af
	ld	a, (ix - 36)
	ld	iyl, a
	pop	af
	ld	e, iyl
	call	__fmul
	ld	hl, (ix - 18)
	ld	de, (ix - 21)
	call	__fadd
	ld	(ix - 9), bc
	ld	l, a
	ld	(ix - 12), hl
	ld	bc, (ix - 30)
	ld	a, iyl
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 43), bc
	ld	(ix - 47), a
	ld	de, (ix - 90)
	ld	(ix - 33), de
	ld	e, (ix - 91)
	ld	(ix - 15), de
	ld	(ix - 46), hl
	ld	a, -62
	ld	(ix - 48), a
BB2_18:
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	jp	p, BB2_20
	ld	bc, (ix - 102)
	ld	a, (ix - 103)
	ld	hl, (ix - 30)
	push	af
	ld	a, (ix - 36)
	ld	iyl, a
	pop	af
	ld	e, iyl
	call	__fmul
	ld	hl, (ix - 18)
	ld	de, (ix - 21)
	call	__fadd
	ld	(ix - 9), bc
	ld	l, a
	ld	(ix - 12), hl
	ld	bc, (ix - 30)
	ld	a, iyl
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 43), bc
	ld	(ix - 47), a
	ld	de, (ix - 98)
	ld	(ix - 33), de
	ld	e, (ix - 99)
	ld	(ix - 15), de
	ld	(ix - 46), hl
	ld	a, 66
	ld	(ix - 48), a
BB2_20:
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	iyl, 1
	ld	d, iyl
	jr	z, BB2_22
	ld	d, 0
BB2_22:
	ld	iyh, d
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	ld	e, iyl
	jr	z, BB2_24
	ld	e, 0
BB2_24:
	ld	a, iyh
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	e
	sbc	a, a
	ld	e, a
	ld	a, l
	or	a, e
	ld	c, a
	bit	0, c
	ld	iy, 8
	ld	de, 7611376
	ex	de, hl
	jr	nz, BB2_26
	push	hl
	pop	de
	ld	iy, 0
BB2_26:
	bit	0, c
	push	hl
	pop	de
	ld	a, 73
	jr	nz, BB2_28
	ld	hl, (ix - 9)
BB2_28:
	ld	(ix - 9), hl
	bit	0, c
	ld	l, a
	jp	nz, BB2_30
	ld	hl, (ix - 12)
BB2_30:
	ld	(ix - 30), hl
	bit	0, c
	ld	(ix - 12), de
	ld	hl, (ix - 33)
	jr	nz, BB2_32
	ld	(ix - 12), hl
BB2_32:
	ld	(ix - 57), c
	bit	0, c
	ld	l, a
	jp	nz, BB2_34
	ld	hl, (ix - 15)
BB2_34:
	ld	(ix - 15), hl
	ld	(ix - 39), iy
	ld	(ix - 33), iy
	ld	(ix - 51), de
	ld	hl, (ix - 18)
	ld	(ix - 74), hl
	ld	hl, (ix - 21)
	ld	(ix - 75), l
	ld	hl, (ix - 24)
	ld	(ix - 78), hl
	ld	hl, (ix - 27)
	ld	(ix - 79), l
	ld	bc, (ix - 9)
	ld	iy, (ix - 30)
BB2_35:
	ld	(ix - 40), a
	ld	(ix - 9), bc
	ld	(ix - 30), iy
	ld	a, iyl
	call	__ftol
	push	bc
	pop	hl
	ld	e, 6
	ld	c, e
	call	__ishrs
	ld	(ix - 36), hl
	ld	bc, (ix - 12)
	ld	hl, (ix - 15)
	ld	a, l
	call	__ftol
	push	bc
	pop	hl
	ld	c, e
	call	__ishrs
	push	hl
	pop	iy
	ld	bc, (ix - 33)
BB2_36:
	push	bc
	pop	hl
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_42
	ld	(ix - 33), bc
	ld	de, (_mapX)
	push	de
	pop	hl
	ld	(ix - 60), iy
	lea	bc, iy
	call	__imulu
	push	hl
	pop	iy
	ld	bc, (ix - 36)
	add	iy, bc
	lea	hl, iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB2_41
	ld	hl, (_mapY)
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_41
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (iy)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_41
	push	hl
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix - 30)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 27)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	(ix - 33), iy
	call	_dist
	ld	(ix - 51), hl
	ld	(ix - 40), e
	ld	hl, 30
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 33)
	ld	hl, (hl)
	ld	(ix - 120), hl
	ld	bc, 8
	ld	hl, (ix - 9)
	ld	(ix - 74), hl
	ld	hl, (ix - 30)
	ld	(ix - 75), l
	ld	hl, (ix - 12)
	ld	(ix - 78), hl
	ld	hl, (ix - 15)
	ld	(ix - 79), l
	ld	iy, (ix - 60)
	jp	BB2_36
BB2_41:
	ld	bc, (ix - 43)
	ld	a, (ix - 47)
	ld	hl, (ix - 9)
	ld	de, (ix - 30)
	call	__fadd
	ld	(ix - 9), bc
	ld	iyl, a
	ld	bc, (ix - 46)
	ld	a, (ix - 48)
	ld	hl, (ix - 12)
	ld	de, (ix - 15)
	call	__fadd
	ld	(ix - 12), bc
	ld	bc, (ix - 9)
	ld	l, a
	ld	(ix - 15), hl
	ld	hl, (ix - 33)
	inc	hl
	ld	(ix - 33), hl
	ld	a, (ix - 40)
	jp	BB2_35
BB2_42:
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_tan
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	(ix - 33), bc
	ld	(ix - 36), a
	call	__fneg
	ld	(ix - 60), bc
	ld	(ix - 63), a
	ld	hl, -3600432
	ld	e, 63
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	call	__fcmp
	jp	p, BB2_45
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, -6894628
	ld	a, 64
	call	__fcmp
	jp	p, BB2_45
	ld	bc, (ix - 116)
	ld	a, (ix - 117)
	ld	hl, (ix - 60)
	ld	e, (ix - 63)
	call	__fmul
	ld	hl, (ix - 24)
	ld	de, (ix - 27)
	call	__fadd
	ld	(ix - 12), bc
	ld	l, a
	ld	(ix - 15), hl
	ld	bc, (ix - 33)
	ld	a, (ix - 36)
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 46), bc
	ld	(ix - 48), a
	ld	bc, (ix - 112)
	ld	(ix - 9), bc
	ld	c, (ix - 113)
	ld	(ix - 30), bc
	ld	(ix - 43), hl
	ld	(ix - 47), e
BB2_45:
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, -3600432
	ld	a, 63
	call	__fcmp
	jp	m, BB2_47
	ld	hl, -6894628
	ld	e, 64
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	call	__fcmp
	jp	p, BB2_48
BB2_47:
	ld	bc, (ix - 70)
	ld	a, (ix - 71)
	ld	hl, (ix - 60)
	ld	e, (ix - 63)
	call	__fmul
	ld	hl, (ix - 24)
	ld	de, (ix - 27)
	call	__fadd
	ld	(ix - 12), bc
	ld	l, a
	ld	(ix - 15), hl
	ld	bc, (ix - 33)
	ld	a, (ix - 36)
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 46), bc
	ld	(ix - 48), a
	ld	bc, (ix - 66)
	ld	(ix - 9), bc
	ld	c, (ix - 67)
	ld	(ix - 30), bc
	ld	(ix - 43), hl
	ld	(ix - 47), e
BB2_48:
	ld	l, (ix - 57)
	bit	0, l
	ld	de, 7611376
	push	de
	pop	bc
	jr	nz, BB2_50
	ld	bc, (ix - 9)
BB2_50:
	ld	(ix - 9), bc
	bit	0, l
	ld	a, 73
	ld	c, a
	jp	nz, BB2_52
	ld	bc, (ix - 30)
BB2_52:
	bit	0, l
	push	de
	pop	iy
	jr	nz, BB2_54
	ld	iy, (ix - 12)
BB2_54:
	bit	0, l
	ld	l, a
	jp	nz, BB2_56
	ld	hl, (ix - 15)
BB2_56:
	ld	(ix - 15), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 87), hl
	ld	(ix - 30), de
	ld	(ix - 36), a
	ld	hl, (ix - 18)
	ld	(ix - 63), hl
	ld	hl, (ix - 21)
	ld	(ix - 80), l
	ld	hl, (ix - 24)
	ld	(ix - 83), hl
	ld	hl, (ix - 27)
	ld	(ix - 84), l
	ld	(ix - 12), bc
BB2_57:
	ld	(ix - 33), iy
	lea	bc, iy
	ld	hl, (ix - 15)
	ld	a, l
	call	__ftol
	push	bc
	pop	hl
	ld	e, 6
	ld	c, e
	call	__ishrs
	ld	(ix - 57), hl
	ld	bc, (ix - 9)
	ld	hl, (ix - 12)
	ld	a, l
	call	__ftol
	push	bc
	pop	hl
	ld	c, e
	call	__ishrs
	ld	(ix - 60), hl
	ld	bc, (ix - 39)
	ld	iy, (ix - 30)
	ld	a, (ix - 36)
BB2_58:
	push	bc
	pop	hl
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	(ix - 30), iy
	ld	(ix - 36), a
	jp	p, BB2_64
	ld	(ix - 39), bc
	ld	de, (_mapY)
	push	de
	pop	hl
	ld	bc, (ix - 60)
	call	__imulu
	push	hl
	pop	iy
	ld	bc, (ix - 57)
	add	iy, bc
	lea	hl, iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB2_63
	ld	hl, (_mapX)
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_63
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (iy)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_63
	push	hl
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 33)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 27)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	(ix - 30), iy
	call	_dist
	push	hl
	pop	iy
	ld	a, e
	ld	hl, 30
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 30)
	ld	hl, (hl)
	ld	(ix - 87), hl
	ld	bc, 8
	ld	hl, (ix - 9)
	ld	(ix - 63), hl
	ld	hl, (ix - 12)
	ld	(ix - 80), l
	ld	hl, (ix - 33)
	ld	(ix - 83), hl
	ld	hl, (ix - 15)
	ld	(ix - 84), l
	jp	BB2_58
BB2_63:
	ld	bc, (ix - 46)
	ld	a, (ix - 48)
	ld	hl, (ix - 33)
	ld	de, (ix - 15)
	call	__fadd
	push	bc
	pop	iy
	ld	l, a
	ld	(ix - 15), hl
	ld	bc, (ix - 43)
	ld	a, (ix - 47)
	ld	hl, (ix - 9)
	ld	de, (ix - 12)
	call	__fadd
	ld	(ix - 9), bc
	ld	l, a
	ld	(ix - 12), hl
	ld	hl, (ix - 39)
	inc	hl
	ld	(ix - 39), hl
	jp	BB2_57
BB2_64:
	lea	hl, iy
	ld	e, a
	ld	iy, (ix - 51)
	lea	bc, iy
	ld	d, (ix - 40)
	ld	a, d
	call	__fcmp
	ld	hl, 99999
	push	hl
	pop	bc
	jp	p, BB2_66
	ld	hl, (ix - 87)
	dec	l
	push	hl
	call	_gfx_SetColor
	ld	d, (ix - 40)
	ld	iy, (ix - 51)
	pop	hl
	ld	bc, (ix - 30)
	ld	a, (ix - 36)
	call	__ftol
	ld	hl, (ix - 63)
	ld	(ix - 9), hl
	ld	l, (ix - 80)
	ld	(ix - 12), hl
	ld	hl, (ix - 83)
	ld	(ix - 33), hl
	ld	l, (ix - 84)
	ld	(ix - 15), hl
BB2_66:
	ld	(ix - 39), bc
	lea	hl, iy
	ld	e, d
	ld	bc, (ix - 30)
	ld	a, (ix - 36)
	call	__fcmp
	ld	bc, (ix - 9)
	jp	p, BB2_68
	ld	hl, (ix - 120)
	push	hl
	ld	(ix - 51), iy
	ld	(ix - 40), d
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix - 51)
	ld	a, (ix - 40)
	call	__ftol
	ld	(ix - 39), bc
	ld	bc, (ix - 74)
	ld	l, (ix - 75)
	ld	(ix - 12), hl
	ld	hl, (ix - 78)
	ld	(ix - 33), hl
	ld	l, (ix - 79)
	ld	(ix - 15), hl
BB2_68:
	ld	(ix - 9), bc
	ld	a, (_k_al)
	bit	0, a
	jr	z, BB2_70
	ld	hl, 7
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix - 9)
	ld	hl, (ix - 12)
	ld	a, l
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fmul
	call	__ftol
	ld	(ix - 30), bc
	ld	bc, (ix - 33)
	ld	iy, (ix - 15)
	ld	a, iyl
	call	__fmul
	call	__ftol
	push	bc
	ld	hl, (ix - 30)
	push	hl
	ld	hl, (ix - 109)
	push	hl
	ld	hl, (ix - 106)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB2_70:
	ld	bc, (_pa)
	ld	a, (_pa+3)
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	call	__fsub
	push	bc
	pop	iy
	ld	e, a
	lea	hl, iy
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	jp	m, BB2_72
	ld	d, 0
BB2_72:
	lea	bc, iy
	ld	(ix - 30), e
	ld	a, e
	ld	hl, -3600432
	ld	e, -64
	call	__fadd
	bit	0, d
	jr	nz, BB2_74
	lea	bc, iy
BB2_74:
	bit	0, d
	ld	e, 64
	jr	nz, BB2_76
	ld	a, (ix - 30)
BB2_76:
	ld	hl, -3600432
	push	bc
	pop	iy
	call	__fcmp
	ld	d, 1
	jp	m, BB2_78
	ld	d, 0
BB2_78:
	lea	bc, iy
	ld	(ix - 36), a
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_80
	lea	bc, iy
BB2_80:
	ld	(ix - 30), bc
	bit	0, d
	ld	bc, (ix - 39)
	jr	nz, BB2_82
	ld	l, (ix - 36)
BB2_82:
	ex	de, hl
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 36), bc
	ld	(ix - 39), a
	push	de
	ld	hl, (ix - 30)
	push	hl
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 36)
	ld	e, (ix - 39)
	call	__fmul
	call	__ftol
	ld	hl, 3072
	call	__idivs
	push	hl
	pop	bc
	ld	de, 48
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_84
	ld	bc, 48
BB2_84:
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 30), bc
	ld	(ix - 36), a
	ld	hl, (ix - 54)
	ld	de, 20
	push	de
	pop	bc
	call	__imulu
	ld	(ix - 39), hl
	ld	bc, (ix - 30)
	ld	a, (ix - 36)
	ld	hl, 4194304
	ld	e, -62
	call	__fadd
	ld	l, a
	push	hl
	push	bc
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 30)
	ld	a, (ix - 36)
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	call	__ftol
	push	bc
	ld	hl, 20
	push	hl
	push	iy
	ld	hl, (ix - 39)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 3)
	ld	hl, (ix - 6)
	ld	a, l
	ld	hl, -7407208
	ld	e, 61
	call	__fadd
	push	bc
	pop	iy
	ld	e, a
	lea	hl, iy
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	jp	m, BB2_86
	ld	d, 0
BB2_86:
	lea	bc, iy
	ld	(ix - 3), e
	ld	a, e
	ld	hl, -3600432
	ld	e, 64
	call	__fadd
	bit	0, d
	jr	nz, BB2_88
	lea	bc, iy
BB2_88:
	bit	0, d
	jr	nz, BB2_90
	ld	a, (ix - 3)
BB2_90:
	ld	hl, -3600432
	ld	e, 64
	ld	(ix - 3), bc
	call	__fcmp
	ld	d, 1
	ld	iy, (ix - 54)
	jp	m, BB2_92
	ld	d, 0
BB2_92:
	ld	bc, (ix - 3)
	ld	(ix - 6), a
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_94
	ld	bc, (ix - 3)
BB2_94:
	bit	0, d
	jr	nz, BB2_96
	ld	l, (ix - 6)
BB2_96:
	ld	(ix - 6), hl
	inc	iy
	ld	de, 27
	jp	BB2_15
BB2_97:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMap2D
_drawMap2D:
	ld	hl, -6
	call	__frameset
	ld	iy, 0
BB3_1:
	ld	bc, (_mapY)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB3_8
	ld	de, 0
BB3_3:
	ld	bc, (_mapX)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB3_7
	ld	(ix - 3), iy
	lea	hl, iy
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 6), de
	ex	de, hl
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	hl, -1
	jp	p, BB3_6
	ld	hl, 0
BB3_6:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, (_mapS)
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__imulu
	push	hl
	pop	iy
	push	de
	pop	hl
	ld	bc, (ix - 3)
	call	__imulu
	inc	iy
	inc	hl
	dec	de
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	de, (ix - 6)
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	inc	de
	jp	BB3_3
BB3_7:
	inc	iy
	jp	BB3_1
BB3_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPlayer
_drawPlayer:
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (_px)
	ld	a, (_px+3)
	or	a, a
	sbc	hl, hl
	ld	e, -64
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (_py)
	ld	a, (_py+3)
	call	__fadd
	call	__ftol
	ld	hl, 5
	push	hl
	push	hl
	push	bc
	push	iy
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw
_draw:
	ld	hl, 30
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 74
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 180
	push	hl
	ld	hl, 320
	push	hl
	ld	hl, 60
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_drawRays3D
	ld	a, (_k_al)
	bit	0, a
	jr	z, BB5_2
	call	_drawMap2D
	call	_drawPlayer
BB5_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gametick
_gametick:
	ld	hl, -40
	call	__frameset
	ld	iy, _pa
	ld	a, (_k_lf)
	bit	0, a
	lea	hl, iy + 3
	ld	(ix - 3), hl
	jp	z, BB6_9
	ld	e, -67
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	lea	hl, iy
	ld	(ix - 6), a
	ld	e, a
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB6_3
	ld	d, 0
	jr	BB6_4
BB6_3:
	ld	d, 1
BB6_4:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, 64
	call	__fadd
	bit	0, d
	jr	nz, BB6_6
	lea	bc, iy
BB6_6:
	bit	0, d
	jr	nz, BB6_8
	ld	a, (ix - 6)
BB6_8:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdy), bc
	ld	(_pdy+3), a
BB6_9:
	ld	a, (_k_rg)
	bit	0, a
	jr	nz, BB6_11
	ld	hl, (_pdy)
	ld	(ix - 12), hl
	ld	a, (_pdy+3)
	ld	(ix - 13), a
	jp	BB6_19
BB6_11:
	ld	e, 61
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	ld	hl, -3600432
	ld	e, 64
	ld	(ix - 6), a
	call	__fcmp
	jp	m, BB6_13
	ld	d, 0
	jr	BB6_14
BB6_13:
	ld	d, 1
BB6_14:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, -64
	call	__fadd
	bit	0, d
	jr	nz, BB6_16
	lea	bc, iy
BB6_16:
	bit	0, d
	jr	nz, BB6_18
	ld	a, (ix - 6)
BB6_18:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(ix - 12), bc
	ld	(_pdy), bc
	ld	(ix - 13), a
	ld	(_pdy+3), a
BB6_19:
	ld	iy, -20
	ld	hl, (_pdx)
	ld	a, (_pdx+3)
	ld	(ix - 22), hl
	ld	(ix - 23), a
	ld	e, a
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	(ix - 6), iy
	jp	m, BB6_21
	ld	iy, 20
BB6_21:
	ld	(ix - 16), iy
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB6_23
	ld	hl, 20
	ld	(ix - 6), hl
BB6_23:
	ld	bc, (_px)
	ld	a, (_px+3)
	ld	(ix - 33), bc
	ld	(ix - 34), a
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fmul
	call	__ftol
	push	bc
	pop	iy
	ld	(ix - 9), iy
	ld	bc, (_py)
	ld	a, (_py+3)
	ld	(ix - 29), bc
	ld	(ix - 30), a
	call	__fmul
	call	__ftol
	ld	(ix - 3), bc
	lea	hl, iy
	lea	bc, iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 26), bc
	ld	hl, (ix - 9)
	ld	de, (ix - 16)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 37), bc
	ld	hl, (ix - 3)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 19), bc
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 40), bc
	ld	hl, (ix - 3)
	ld	bc, (ix - 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 6), bc
	ld	a, (_k_up)
	bit	0, a
	jr	nz, BB6_25
	ld	iy, _map
	jp	BB6_29
BB6_25:
	ld	de, (ix - 9)
	ld	hl, (ix - 16)
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	push	bc
	pop	de
	ld	iy, (_mapX)
	lea	hl, iy
	ld	bc, (ix - 19)
	call	__imulu
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB6_27
	ld	bc, (ix - 22)
	ld	a, (ix - 23)
	ld	hl, (ix - 33)
	ld	e, (ix - 34)
	call	__fadd
	ld	(ix - 33), bc
	ld	(_px), bc
	ld	(ix - 34), a
	ld	(_px+3), a
BB6_27:
	lea	hl, iy
	ld	bc, (ix - 40)
	call	__imulu
	ld	de, (ix - 26)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _map
	lea	hl, iy
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB6_29
	ld	bc, (ix - 12)
	ld	a, (ix - 13)
	ld	hl, (ix - 29)
	ld	e, (ix - 30)
	call	__fadd
	ld	(ix - 29), bc
	ld	(_py), bc
	ld	(ix - 30), a
	ld	(_py+3), a
BB6_29:
	ld	bc, (ix - 19)
	ld	a, (_k_dw)
	bit	0, a
	jr	z, BB6_34
	ld	hl, (_mapX)
	ld	(ix - 16), hl
	call	__imulu
	ld	de, (ix - 37)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB6_32
	ld	bc, (ix - 33)
	ld	a, (ix - 34)
	ld	hl, (ix - 22)
	ld	e, (ix - 23)
	call	__fsub
	ld	(_px), bc
	ld	(_px+3), a
BB6_32:
	ld	hl, (ix - 16)
	ld	bc, (ix - 6)
	call	__imulu
	ld	de, (ix - 26)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB6_34
	ld	bc, (ix - 29)
	ld	a, (ix - 30)
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	call	__fsub
	ld	(_py), bc
	ld	(_py+3), a
BB6_34:
	ld	a, (_k_2n)
	bit	0, a
	jp	z, BB6_45
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	ld	iyl, a
	ld	a, d
	jp	m, BB6_37
	ld	a, iyl
BB6_37:
	ld	iyh, a
	ld	hl, (ix - 22)
	ld	e, (ix - 23)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB6_39
	ld	d, iyl
BB6_39:
	ld	bc, -30
	ld	a, iyh
	bit	0, a
	push	bc
	pop	hl
	ld	e, 60
	jr	nz, BB6_41
	ld	hl, 30
BB6_41:
	bit	0, d
	jr	nz, BB6_43
	ld	bc, 30
BB6_43:
	ld	(ix - 6), bc
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 3), bc
	ld	bc, (ix - 9)
	ld	hl, (ix - 6)
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	push	bc
	pop	de
	ld	hl, (_mapX)
	ld	bc, (ix - 3)
	call	__imulu
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _map
	add	iy, de
	ld	hl, (iy)
	ld	de, 130
	or	a, a
	sbc	hl, de
	jr	nz, BB6_45
	or	a, a
	sbc	hl, hl
	ld	(iy), hl
BB6_45:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_kctick
_kctick:
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 3
	call	__bshru
	and	a, 1
	ld	(_k_up), a
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, 1
	ld	(_k_dw), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	srl	a
	and	a, 1
	ld	(_k_lf), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	dec	b
	call	__bshru
	and	a, 1
	ld	(_k_rg), a
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 5
	call	__bshru
	and	a, 1
	ld	(_k_2n), a
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 7
	call	__bshru
	ld	(_k_al), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB7_2
	ld	a, 1
	ld	(_ccd), a
BB7_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_init
_init:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 2097152
	ld	(_px), hl
	ld	a, 66
	ld	(_px+3), a
	ld	(_py), hl
	ld	(_py+3), a
	or	a, a
	sbc	hl, hl
	ld	(_pa), hl
	ld	e, h
	ld	a, e
	ld	(_pa+3), a
	ld	bc, -6291456
	ld	(_pdx), bc
	ld	a, 64
	ld	(_pdx+3), a
	ld	(_pdy), hl
	ld	a, e
	ld	(_pdy+3), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	call	_init
BB9_1:
	ld	a, (_ccd)
	bit	0, a
	jr	nz, BB9_3
	call	_draw
	call	_gfx_SwapDraw
	call	_gametick
	call	_kctick
	jr	BB9_1
BB9_3:
	call	_gfx_End
	ld	iy, -3145600
	call	_os_ClrLCD
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	a, (_lost)
	bit	0, a
	jr	z, BB9_6
	ld	hl, _.str
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	iy, -3145600
	call	_os_NewLine
	ld	hl, _.str.1
	push	hl
	call	_os_PutStrFull
	pop	hl
BB9_5:
	call	_os_GetCSC
	or	a, a
	jr	z, BB9_5
BB9_6:
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_k_al
_k_al:
	rb	1

	section	.bss,"aw",@nobits
	public	_ccd
_ccd:
	rb	1

	section	.bss,"aw",@nobits
	public	_lost
_lost:
	rb	1

	section	.rodata,"a",@progbits
	public	_pi
_pi:
	dd	0x40490fd0

	section	.rodata,"a",@progbits
	public	_pi2
_pi2:
	dd	0x3fc90fd0

	section	.rodata,"a",@progbits
	public	_pi3
_pi3:
	dd	0x4096cbdc

	section	.rodata,"a",@progbits
	public	_degree_rads
_degree_rads:
	dd	0x3c8ef998

	section	.rodata,"a",@progbits
	public	_SCWIDTH
_SCWIDTH:
	dl	106

	section	.rodata,"a",@progbits
	public	_SCHEIGHT
_SCHEIGHT:
	dl	48

	section	.data,"aw",@progbits
	public	_SCALEFACTOR
_SCALEFACTOR:
	dl	5

	section	.data,"aw",@progbits
	public	_mapX
_mapX:
	dl	8

	section	.data,"aw",@progbits
	public	_mapY
_mapY:
	dl	8

	section	.data,"aw",@progbits
	public	_mapS
_mapS:
	dl	32

	section	.data,"aw",@progbits
	public	_map
_map:
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	148
	dl	148
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	148
	dl	148
	dl	0
	dl	0
	dl	9
	dl	9
	dl	9
	dl	0
	dl	148
	dl	148
	dl	0
	dl	0
	dl	9
	dl	9
	dl	9
	dl	0
	dl	148
	dl	148
	dl	0
	dl	0
	dl	9
	dl	9
	dl	0
	dl	0
	dl	148
	dl	148
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148
	dl	148

	section	.bss,"aw",@nobits
	public	_px
_px:
	rb	4

	section	.bss,"aw",@nobits
	public	_py
_py:
	rb	4

	section	.bss,"aw",@nobits
	public	_pa
_pa:
	rb	4

	section	.bss,"aw",@nobits
	public	_k_lf
_k_lf:
	rb	1

	section	.bss,"aw",@nobits
	public	_pdx
_pdx:
	rb	4

	section	.bss,"aw",@nobits
	public	_pdy
_pdy:
	rb	4

	section	.bss,"aw",@nobits
	public	_k_rg
_k_rg:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_up
_k_up:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_dw
_k_dw:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_2n
_k_2n:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"You lost...", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press any key to exit", 0

	section	.bss,"aw",@nobits
	public	_sp
_sp:
	rb	72

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6d9aa7a16db70f3d02ae304b08d4a03011281fef)"
	extern	_fabsf
	extern	__Unwind_SjLj_Register
	extern	_gfx_Begin
	extern	_gfx_Line
	extern	__fadd
	extern	_tan
	extern	_os_DrawStatusBar
	extern	__ftol
	extern	__idivs
	extern	__setflag
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_os_PutStrFull
	extern	__ltof
	extern	_os_GetCSC
	extern	__fsub
	extern	_os_HomeUp
	extern	__frameset
	extern	_sin
	extern	_kb_Scan
	extern	_sqrt
	extern	_os_ClrLCD
	extern	__ishrs
	extern	__fmul
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__fneg
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_os_NewLine
	extern	_gfx_End
	extern	__fcmp
	extern	__frameset0
	extern	_cos
	extern	__bshru
