	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_drawPixelScale5
_drawPixelScale5:
	call	__frameset0
	ld	a, (ix + 12)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 6)
	ld	bc, 5
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	call	__imulu
	push	bc
	push	bc
	push	hl
	push	de
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawSprite
_drawSprite:
	ld	hl, -57
	call	__frameset
	ld	bc, (_Saul+9)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	e, a
	ld	hl, (_px)
	ld	a, (_px+3)
	ld	d, a
	ld	a, e
	ld	e, d
	call	__fsub
	ld	(ix - 3), bc
	ld	(ix - 4), a
	ld	bc, (_Saul+12)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	e, a
	ld	hl, (_py)
	ld	a, (_py+3)
	ld	d, a
	ld	a, e
	ld	e, d
	call	__fsub
	ld	(ix - 7), bc
	ld	(ix - 10), a
	ld	bc, (_Saul+15)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 19), bc
	ld	(ix - 26), a
	ld	de, (_pa)
	ld	iy, _pa
	lea	hl, iy + 3
	ld	l, (hl)
	push	hl
	push	de
	call	_cos
	ld	(ix - 13), hl
	ld	(ix - 16), e
	pop	hl
	pop	hl
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	(ix - 22), bc
	ld	a, e
	ld	(ix - 23), a
	pop	hl
	pop	hl
	call	__fneg
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 7)
	ld	a, (ix - 10)
	ld	hl, (ix - 13)
	ld	e, (ix - 16)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(ix - 29), bc
	ld	(ix - 32), a
	ld	bc, (ix - 7)
	ld	a, (ix - 10)
	ld	hl, (ix - 22)
	ld	e, (ix - 23)
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	ld	hl, (ix - 13)
	ld	e, (ix - 16)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 29)
	ld	a, (ix - 32)
	ld	hl, -2621440
	ld	e, 66
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fdiv
	ld	hl, 131072
	ld	e, 67
	call	__fadd
	ld	(ix - 22), bc
	ld	(ix - 23), a
	ld	bc, (ix - 19)
	ld	a, (ix - 26)
	ld	hl, -2621440
	dec	e
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fdiv
	ld	hl, -1048576
	ld	e, 66
	call	__fadd
	ld	(ix - 26), bc
	ld	(ix - 29), a
	ld	bc, -6291456
	ld	a, 68
	ld	(ix - 50), iy
	lea	hl, iy
	ld	(ix - 51), d
	ld	e, d
	call	__fdiv
	call	__ftol
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB1_2
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB1_2:
	ld	de, 32
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	c, BB1_4
	ld	bc, 32
BB1_4:
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	bc
	pop	iy
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, -8388608
	ld	a, 65
	call	__fdiv
	ld	(ix - 10), bc
	ld	(ix - 13), a
	ld	a, 1
	lea	hl, iy
	ld	c, a
	call	__ishru
	push	hl
	pop	iy
	call	__ineg
	push	hl
	pop	de
	lea	hl, iy
	ld	bc, -5
	call	__imulu
	ld	(ix - 38), hl
	lea	hl, iy
	ld	c, a
	call	__ishl
	lea	bc, iy
	ld	(ix - 41), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	dec	a
	ld	(ix - 4), a
BB1_5:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB1_14
	ld	(ix - 32), bc
	ld	(ix - 35), de
	ex	de, hl
	ld	bc, 5
	call	__imulu
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 26)
	ld	a, (ix - 29)
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	call	__ftol
	push	bc
	pop	hl
	ld	c, 4
	call	__ishl
	ld	(ix - 57), hl
	ld	de, -2
	add	iy, de
	ld	(ix - 54), iy
	ld	de, (ix - 41)
	ld	iy, (ix - 38)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	xor	a, a
BB1_7:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB1_13
	ld	(ix - 19), a
	ld	(ix - 16), bc
	ld	(ix - 44), de
	lea	hl, iy
	ld	(ix - 7), iy
	ld	iy, (ix - 7)
	add	iy, iy
	ld	iy, (ix - 7)
	sbc	hl, hl
	lea	bc, iy
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 22)
	ld	a, (ix - 23)
	call	__fadd
	call	__ftol
	ld	(ix - 47), bc
	push	bc
	pop	hl
	dec	hl
	ld	de, 199
	or	a, a
	sbc	hl, de
	jp	nc, BB1_12
	ld	hl, (ix - 47)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _depth
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	ld	iy, (ix - 7)
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 50)
	ld	a, (ix - 51)
	call	__fcmp
	jp	p, BB1_12
	ld	hl, (ix - 47)
	ld	b, l
	ld	c, 20
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _depth
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	ld	iy, (ix - 7)
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, (ix - 50)
	ld	e, (ix - 51)
	call	__fcmp
	jp	p, BB1_12
	ld	bc, (ix - 16)
	ld	a, (ix - 19)
	call	__ftol
	ld	hl, (ix - 57)
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _SaulTex
	add	hl, de
	ld	l, (hl)
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, -2
	ld	iy, (ix - 47)
	add	iy, de
	ld	hl, 5
	push	hl
	push	hl
	ld	hl, (ix - 54)
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	iy, (ix - 7)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB1_12:
	ld	bc, (ix - 10)
	ld	a, (ix - 13)
	ld	hl, (ix - 16)
	ld	e, (ix - 19)
	call	__fadd
	ld	de, 5
	add	iy, de
	ld	de, (ix - 44)
	dec	de
	jp	BB1_7
BB1_13:
	ld	bc, (ix - 10)
	ld	a, (ix - 13)
	ld	hl, (ix - 3)
	ld	e, (ix - 4)
	call	__fadd
	ld	(ix - 3), bc
	ld	(ix - 4), a
	ld	de, (ix - 35)
	inc	de
	ld	bc, (ix - 32)
	jp	BB1_5
BB1_14:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawRays3D
_drawRays3D:
	ld	hl, -114
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	e, 64
	ld	iy, 981400
	ld	d, h
	ld	bc, (_px)
	ld	a, (_px+3)
	call	__fmul
	ld	(ix - 9), bc
	ld	(ix - 20), a
	ld	bc, (_py)
	ld	a, (_py+3)
	call	__fmul
	ld	(ix - 15), bc
	ld	(ix - 19), a
	ld	bc, (_pa)
	ld	a, (_pa+3)
	lea	hl, iy
	ld	e, -66
	call	__fadd
	push	bc
	pop	iy
	lea	hl, iy
	ld	(ix - 3), a
	ld	e, a
	ld	bc, 0
	ld	a, d
	call	__fcmp
	jp	m, BB2_2
	ld	d, 0
	jr	BB2_3
BB2_2:
	ld	d, 1
BB2_3:
	ld	e, 64
	lea	bc, iy
	ld	a, (ix - 3)
	ld	hl, -3600432
	call	__fadd
	bit	0, d
	jr	nz, BB2_5
	lea	bc, iy
BB2_5:
	bit	0, d
	jr	nz, BB2_7
	ld	a, (ix - 3)
BB2_7:
	ld	hl, -3600432
	ld	e, 64
	push	bc
	pop	iy
	ld	(ix - 6), a
	call	__fcmp
	jp	m, BB2_9
	ld	d, 0
	jr	BB2_10
BB2_9:
	ld	d, 1
BB2_10:
	ld	a, (ix - 6)
	lea	bc, iy
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_12
	lea	bc, iy
BB2_12:
	ld	(ix - 3), bc
	bit	0, d
	ld	de, (ix - 15)
	jr	nz, BB2_14
	ld	l, (ix - 6)
BB2_14:
	ld	(ix - 6), hl
	push	de
	pop	bc
	ld	a, (ix - 19)
	call	__ftol
	ld	(ix - 12), bc
	push	bc
	pop	hl
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	e, -72
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 15)
	ld	d, (ix - 19)
	ld	a, d
	ld	(ix - 90), hl
	ld	(ix - 91), e
	call	__fsub
	ld	(ix - 94), bc
	ld	(ix - 95), a
	ld	hl, 64
	push	hl
	pop	bc
	ld	hl, (ix - 12)
	add	hl, bc
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 15)
	ld	a, d
	ld	(ix - 98), hl
	ld	(ix - 99), e
	call	__fsub
	ld	(ix - 102), bc
	ld	(ix - 103), a
	ld	bc, (ix - 9)
	ld	d, (ix - 20)
	ld	a, d
	call	__ftol
	ld	(ix - 12), bc
	push	bc
	pop	hl
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	e, -72
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 9)
	ld	a, d
	ld	(ix - 106), hl
	ld	(ix - 107), e
	call	__fsub
	ld	(ix - 110), bc
	ld	(ix - 111), a
	ld	bc, 64
	ld	hl, (ix - 12)
	add	hl, bc
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 9)
	ld	a, d
	ld	(ix - 63), hl
	ld	(ix - 64), e
	call	__fsub
	ld	(ix - 67), bc
	ld	(ix - 68), a
	ld	de, 13
	ld	iy, 0
	ld	bc, (ix - 3)
BB2_15:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB2_95
	ld	(ix - 54), iy
	ld	hl, (ix - 6)
	push	hl
	push	bc
	ld	(ix - 3), bc
	call	_tan
	pop	bc
	pop	bc
	ld	bc, -8388608
	ld	a, -65
	call	__fdiv
	ld	(ix - 23), bc
	ld	d, a
	ld	hl, 4788176
	ld	a, 64
	ld	e, a
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	ld	iy, (ix - 23)
	call	__fcmp
	jp	p, BB2_18
	ld	bc, (ix - 94)
	ld	a, (ix - 95)
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 9)
	ld	e, (ix - 20)
	call	__fadd
	ld	(ix - 18), bc
	ld	(ix - 33), a
	lea	bc, iy
	ld	a, d
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 45), bc
	ld	(ix - 49), a
	ld	bc, (ix - 90)
	ld	(ix - 12), bc
	ld	a, (ix - 91)
	ld	(ix - 36), a
	ld	(ix - 48), hl
	ld	a, -62
	ld	(ix - 50), a
BB2_18:
	ld	(ix - 26), d
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	jp	p, BB2_20
	ld	bc, (ix - 102)
	ld	a, (ix - 103)
	lea	hl, iy
	ld	d, (ix - 26)
	ld	e, d
	call	__fmul
	ld	hl, (ix - 9)
	ld	e, (ix - 20)
	call	__fadd
	ld	(ix - 18), bc
	ld	(ix - 33), a
	lea	bc, iy
	ld	a, d
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 45), bc
	ld	(ix - 49), a
	ld	de, (ix - 98)
	ld	(ix - 12), de
	ld	a, (ix - 99)
	ld	(ix - 36), a
	ld	(ix - 48), hl
	ld	a, 66
	ld	(ix - 50), a
BB2_20:
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	a, 1
	ld	iyl, a
	push	de
	pop	bc
	jr	z, BB2_22
	ld	d, 0
	ld	a, d
BB2_22:
	ld	d, a
	ld	e, c
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	ld	c, iyl
	jr	z, BB2_24
	ld	c, 0
BB2_24:
	rrc	d
	sbc	a, a
	ld	l, a
	rrc	c
	sbc	a, a
	ld	c, a
	ld	a, l
	or	a, c
	bit	0, a
	ld	hl, 8
	jr	nz, BB2_26
	or	a, a
	sbc	hl, hl
BB2_26:
	ld	(ix - 29), hl
	bit	0, a
	ld	bc, 7611376
	push	bc
	pop	hl
	ld	iy, (ix - 9)
	ld	d, 73
	jr	nz, BB2_28
	ld	hl, (ix - 18)
BB2_28:
	ld	(ix - 18), hl
	bit	0, a
	ld	e, d
	ld	hl, (ix - 15)
	jr	nz, BB2_30
	ld	e, (ix - 33)
BB2_30:
	ld	(ix - 26), e
	bit	0, a
	jr	nz, BB2_32
	ld	bc, (ix - 12)
BB2_32:
	ld	(ix - 60), a
	bit	0, a
	ld	a, d
	jr	nz, BB2_34
	ld	a, (ix - 36)
BB2_34:
	ld	(ix - 30), a
	ld	iy, (ix - 29)
	ld	(ix - 12), iy
	ld	de, 7611376
	ld	(ix - 23), de
	ld	a, 73
	ld	(ix - 51), a
	ld	de, (ix - 9)
	ld	(ix - 71), de
	ld	a, (ix - 20)
	ld	(ix - 72), a
	ld	(ix - 75), hl
	ld	a, (ix - 19)
	ld	(ix - 76), a
	push	bc
	pop	iy
	ld	bc, (ix - 18)
	ld	d, (ix - 26)
BB2_35:
	ld	(ix - 18), bc
	ld	a, d
	call	__ftol
	push	bc
	pop	hl
	ld	e, d
	ld	d, 6
	ld	c, d
	call	__ishrs
	ld	(ix - 42), hl
	lea	bc, iy
	ld	d, (ix - 30)
	ld	a, d
	call	__ftol
	push	bc
	pop	hl
	ld	c, 6
	call	__ishrs
	ld	(ix - 57), hl
	ld	bc, (ix - 18)
	ld	(ix - 26), e
	ld	a, e
	ld	hl, (ix - 9)
	ld	e, (ix - 20)
	call	__fsub
	ld	(ix - 36), bc
	ld	(ix - 39), a
	ld	(ix - 33), iy
	lea	bc, iy
	ld	a, d
	ld	hl, (ix - 15)
	ld	e, (ix - 19)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 36)
	ld	a, (ix - 39)
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(ix - 36), bc
	ld	l, a
	ld	(ix - 39), hl
	ld	iy, (ix - 23)
	ld	bc, (ix - 12)
BB2_36:
	push	bc
	pop	hl
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	(ix - 23), iy
	jp	p, BB2_42
	ld	(ix - 12), bc
	ld	de, (_mapX)
	push	de
	pop	hl
	ld	bc, (ix - 57)
	call	__imulu
	push	hl
	pop	iy
	ld	bc, (ix - 42)
	add	iy, bc
	lea	hl, iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB2_41
	ld	hl, (_mapY)
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_41
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (iy)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_41
	ld	hl, (ix - 39)
	push	hl
	ld	hl, (ix - 36)
	push	hl
	ld	(ix - 12), iy
	call	_sqrt
	push	hl
	pop	iy
	ld	(ix - 51), e
	pop	hl
	pop	hl
	ld	hl, (ix - 12)
	ld	hl, (hl)
	ld	(ix - 114), hl
	ld	bc, 8
	ld	hl, (ix - 18)
	ld	(ix - 71), hl
	ld	a, (ix - 26)
	ld	(ix - 72), a
	ld	hl, (ix - 33)
	ld	(ix - 75), hl
	ld	a, (ix - 30)
	ld	(ix - 76), a
	jp	BB2_36
BB2_41:
	ld	bc, (ix - 45)
	ld	a, (ix - 49)
	ld	hl, (ix - 18)
	ld	e, (ix - 26)
	call	__fadd
	ld	(ix - 18), bc
	ld	d, a
	ld	bc, (ix - 48)
	ld	a, (ix - 50)
	ld	hl, (ix - 33)
	ld	e, (ix - 30)
	call	__fadd
	push	bc
	pop	iy
	ld	bc, (ix - 18)
	ld	(ix - 30), a
	ld	hl, (ix - 12)
	inc	hl
	ld	(ix - 12), hl
	jp	BB2_35
BB2_42:
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_tan
	push	hl
	pop	bc
	ld	d, e
	pop	hl
	pop	hl
	ld	(ix - 12), bc
	ld	a, d
	call	__fneg
	ld	(ix - 36), bc
	ld	(ix - 39), a
	ld	hl, -3600432
	ld	e, 63
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	call	__fcmp
	jp	p, BB2_45
	ld	hl, (ix - 3)
	ld	a, d
	ld	de, (ix - 6)
	ld	d, a
	ld	bc, -6894628
	ld	a, 64
	call	__fcmp
	jp	p, BB2_45
	ld	bc, (ix - 110)
	ld	a, (ix - 111)
	ld	hl, (ix - 36)
	ld	e, (ix - 39)
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, (ix - 19)
	call	__fadd
	ld	(ix - 33), bc
	ld	(ix - 30), a
	ld	bc, (ix - 12)
	ld	a, d
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 48), bc
	ld	(ix - 50), a
	ld	bc, (ix - 106)
	ld	(ix - 18), bc
	ld	a, (ix - 107)
	ld	(ix - 26), a
	ld	(ix - 45), hl
	ld	(ix - 49), e
BB2_45:
	ld	(ix - 42), d
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, -3600432
	ld	a, 63
	call	__fcmp
	jp	m, BB2_47
	ld	hl, -6894628
	ld	e, 64
	ld	bc, (ix - 3)
	ld	iy, (ix - 6)
	ld	a, iyl
	call	__fcmp
	jp	p, BB2_48
BB2_47:
	ld	bc, (ix - 67)
	ld	a, (ix - 68)
	ld	hl, (ix - 36)
	ld	e, (ix - 39)
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, (ix - 19)
	call	__fadd
	ld	(ix - 33), bc
	ld	(ix - 30), a
	ld	bc, (ix - 12)
	ld	a, (ix - 42)
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 48), bc
	ld	(ix - 50), a
	ld	bc, (ix - 63)
	ld	(ix - 18), bc
	ld	a, (ix - 64)
	ld	(ix - 26), a
	ld	(ix - 45), hl
	ld	(ix - 49), e
BB2_48:
	ld	l, (ix - 60)
	bit	0, l
	ld	bc, 7611376
	push	bc
	pop	iy
	jr	nz, BB2_50
	ld	iy, (ix - 18)
BB2_50:
	bit	0, l
	ld	d, 73
	ld	h, d
	ld	e, (ix - 20)
	ld	a, (ix - 19)
	ld	c, (ix - 26)
	jr	nz, BB2_52
	ld	d, c
BB2_52:
	bit	0, l
	ld	bc, 7611376
	jr	nz, BB2_54
	ld	bc, (ix - 33)
BB2_54:
	ld	(ix - 12), bc
	lea	bc, iy
	bit	0, l
	ex	de, hl
	ld	iyh, d
	ld	iyl, d
	ex	de, hl
	jr	nz, BB2_56
	push	af
	ld	a, (ix - 30)
	ld	iyh, a
	pop	af
BB2_56:
	or	a, a
	sbc	hl, hl
	ld	(ix - 87), hl
	ld	hl, 7611376
	ld	(ix - 26), hl
	push	af
	ld	a, iyl
	ld	(ix - 30), a
	pop	af
	ld	hl, (ix - 9)
	ld	(ix - 79), hl
	ld	(ix - 80), e
	ld	hl, (ix - 15)
	ld	(ix - 83), hl
	ld	(ix - 84), a
	ld	(ix - 18), bc
	ld	e, d
	ld	bc, (ix - 12)
BB2_57:
	ld	(ix - 12), bc
	ld	a, iyh
	call	__ftol
	push	bc
	pop	hl
	ld	d, 6
	ld	c, d
	call	__ishrs
	ld	(ix - 57), hl
	ld	d, iyh
	ld	iy, (ix - 18)
	lea	bc, iy
	ld	a, e
	call	__ftol
	push	bc
	pop	hl
	ld	c, 6
	call	__ishrs
	ld	(ix - 60), hl
	lea	bc, iy
	ld	(ix - 33), e
	ld	a, e
	ld	hl, (ix - 9)
	ld	e, (ix - 20)
	call	__fsub
	ld	l, d
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 12)
	ld	(ix - 36), l
	ld	a, l
	ld	hl, (ix - 15)
	ld	e, (ix - 19)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	ld	(ix - 39), bc
	ld	(ix - 42), a
	lea	bc, iy
	ld	a, d
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 39)
	ld	e, (ix - 42)
	call	__fadd
	ld	(ix - 39), bc
	ld	l, a
	ld	(ix - 42), hl
	ld	bc, (ix - 29)
	ld	iy, (ix - 26)
	ld	a, (ix - 30)
BB2_58:
	push	bc
	pop	hl
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	(ix - 26), iy
	ld	(ix - 30), a
	jp	p, BB2_64
	ld	(ix - 29), bc
	ld	de, (_mapY)
	push	de
	pop	hl
	ld	bc, (ix - 60)
	call	__imulu
	push	hl
	pop	iy
	ld	bc, (ix - 57)
	add	iy, bc
	lea	hl, iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB2_63
	ld	hl, (_mapX)
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_63
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (iy)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_63
	ld	hl, (ix - 42)
	push	hl
	ld	hl, (ix - 39)
	push	hl
	ld	(ix - 26), iy
	call	_sqrt
	push	hl
	pop	iy
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 26)
	ld	hl, (hl)
	ld	(ix - 87), hl
	ld	bc, 8
	ld	hl, (ix - 18)
	ld	(ix - 79), hl
	ld	l, (ix - 33)
	ld	(ix - 80), l
	ld	hl, (ix - 12)
	ld	(ix - 83), hl
	ld	l, (ix - 36)
	ld	(ix - 84), l
	jp	BB2_58
BB2_63:
	ld	bc, (ix - 48)
	ld	a, (ix - 50)
	ld	hl, (ix - 12)
	ld	e, (ix - 36)
	call	__fadd
	ld	(ix - 12), bc
	ld	iyh, a
	ld	bc, (ix - 45)
	ld	a, (ix - 49)
	ld	hl, (ix - 18)
	ld	e, (ix - 33)
	call	__fadd
	ld	(ix - 18), bc
	ld	bc, (ix - 12)
	ld	e, a
	ld	hl, (ix - 29)
	inc	hl
	ld	(ix - 29), hl
	jp	BB2_57
BB2_64:
	lea	hl, iy
	ld	e, a
	ld	bc, (ix - 23)
	ld	d, (ix - 51)
	ld	a, d
	call	__fcmp
	ld	hl, 99999
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	jp	p, BB2_66
	ld	hl, (ix - 87)
	dec	l
	push	hl
	call	_gfx_SetColor
	ld	d, (ix - 51)
	ld	iy, (ix - 3)
	pop	hl
	ld	bc, (ix - 26)
	ld	a, (ix - 30)
	call	__ftol
	ld	hl, (ix - 79)
	ld	(ix - 18), hl
	ld	a, (ix - 80)
	ld	(ix - 33), a
	ld	hl, (ix - 83)
	ld	(ix - 12), hl
	ld	a, (ix - 84)
	ld	(ix - 36), a
BB2_66:
	ld	(ix - 29), bc
	ld	hl, (ix - 23)
	ld	e, d
	ld	bc, (ix - 26)
	ld	a, (ix - 30)
	call	__fcmp
	jp	p, BB2_68
	ld	hl, (ix - 114)
	push	hl
	ld	(ix - 51), d
	call	_gfx_SetColor
	ld	iy, (ix - 3)
	pop	hl
	ld	bc, (ix - 23)
	ld	a, (ix - 51)
	call	__ftol
	ld	(ix - 29), bc
	ld	hl, (ix - 71)
	ld	(ix - 18), hl
	ld	a, (ix - 72)
	ld	(ix - 33), a
	ld	hl, (ix - 75)
	ld	(ix - 12), hl
	ld	a, (ix - 76)
	ld	(ix - 36), a
BB2_68:
	ld	bc, (_pa)
	ld	a, (_pa+3)
	lea	hl, iy
	ld	de, (ix - 6)
	call	__fsub
	push	bc
	pop	iy
	ld	e, a
	lea	hl, iy
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	jp	m, BB2_70
	ld	d, 0
BB2_70:
	lea	bc, iy
	ld	(ix - 23), e
	ld	a, e
	ld	hl, -3600432
	ld	e, -64
	call	__fadd
	bit	0, d
	jr	nz, BB2_72
	lea	bc, iy
BB2_72:
	bit	0, d
	ld	e, 64
	jr	nz, BB2_74
	ld	a, (ix - 23)
BB2_74:
	ld	hl, -3600432
	push	bc
	pop	iy
	call	__fcmp
	ld	d, 1
	jp	m, BB2_76
	ld	d, 0
BB2_76:
	lea	bc, iy
	ld	(ix - 26), a
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_78
	lea	bc, iy
BB2_78:
	ld	(ix - 23), bc
	bit	0, d
	ld	bc, (ix - 29)
	jr	nz, BB2_80
	ld	l, (ix - 26)
BB2_80:
	ex	de, hl
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 26), bc
	ld	(ix - 29), a
	push	de
	ld	hl, (ix - 23)
	push	hl
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 26)
	ld	e, (ix - 29)
	call	__fmul
	call	__ftol
	ld	hl, 3072
	ld	(ix - 29), bc
	call	__idivs
	push	hl
	pop	bc
	ld	de, 48
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_82
	ld	bc, 48
BB2_82:
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 23), bc
	ld	(ix - 26), a
	ld	de, (ix - 54)
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _depth
	add	hl, bc
	ld	bc, (ix - 29)
	ld	(hl), bc
	ex	de, hl
	ld	de, 20
	push	de
	pop	bc
	call	__imulu
	ld	(ix - 29), hl
	ld	bc, (ix - 23)
	ld	a, (ix - 26)
	ld	hl, 4194304
	ld	e, -62
	call	__fadd
	ld	l, a
	push	hl
	push	bc
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 23)
	ld	a, (ix - 26)
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	call	__ftol
	push	bc
	ld	hl, 20
	push	hl
	push	iy
	ld	hl, (ix - 29)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 3)
	ld	hl, (ix - 6)
	ld	a, l
	ld	hl, -7407208
	ld	e, 61
	call	__fadd
	push	bc
	pop	iy
	ld	e, a
	lea	hl, iy
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	jp	m, BB2_84
	ld	d, 0
BB2_84:
	lea	bc, iy
	ld	(ix - 3), e
	ld	a, e
	ld	hl, -3600432
	ld	e, 64
	call	__fadd
	bit	0, d
	jr	nz, BB2_86
	lea	bc, iy
BB2_86:
	bit	0, d
	jr	nz, BB2_88
	ld	a, (ix - 3)
BB2_88:
	ld	hl, -3600432
	ld	e, 64
	push	bc
	pop	iy
	call	__fcmp
	ld	d, 1
	jp	m, BB2_90
	ld	d, 0
BB2_90:
	lea	bc, iy
	ld	(ix - 3), a
	ld	e, -64
	call	__fadd
	ld	l, a
	bit	0, d
	jr	nz, BB2_92
	lea	bc, iy
BB2_92:
	bit	0, d
	ld	iy, (ix - 54)
	jr	nz, BB2_94
	ld	l, (ix - 3)
BB2_94:
	ld	(ix - 6), hl
	inc	iy
	ld	de, 13
	jp	BB2_15
BB2_95:
	ld	sp, ix
	pop	ix
	jp	_drawSprite
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMap2D
_drawMap2D:
	ld	hl, -6
	call	__frameset
	ld	iy, 0
BB3_1:
	ld	bc, (_mapY)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB3_8
	ld	de, 0
BB3_3:
	ld	bc, (_mapX)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB3_7
	ld	(ix - 3), iy
	lea	hl, iy
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 6), de
	ex	de, hl
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	hl, -1
	jp	p, BB3_6
	ld	hl, 0
BB3_6:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, (_mapS)
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__imulu
	push	hl
	pop	iy
	push	de
	pop	hl
	ld	bc, (ix - 3)
	call	__imulu
	inc	iy
	inc	hl
	dec	de
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	de, (ix - 6)
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	inc	de
	jp	BB3_3
BB3_7:
	inc	iy
	jp	BB3_1
BB3_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPlayer
_drawPlayer:
	ld	hl, -10
	call	__frameset
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (_px)
	ld	iy, _px
	lea	hl, iy + 3
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	e, -64
	call	__fadd
	call	__ftol
	ld	(ix - 3), bc
	ld	bc, (_py)
	ld	iy, _py
	lea	hl, iy + 3
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	call	__fadd
	call	__ftol
	ld	hl, 5
	push	hl
	push	hl
	push	bc
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (_px)
	ld	a, (_px+3)
	ld	d, a
	lea	bc, iy
	call	__ftol
	ld	(ix - 3), bc
	ld	bc, (_py)
	ld	(ix - 9), bc
	ld	a, (_py+3)
	ld	(ix - 10), a
	call	__ftol
	ld	(ix - 6), bc
	ld	bc, (_pdx)
	ld	a, (_pdx+3)
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (_pdy)
	ld	a, (_pdy+3)
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	hl, (ix - 9)
	ld	e, (ix - 10)
	call	__fadd
	call	__ftol
	push	bc
	push	iy
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -32
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (_Saul+9)
	ld	de, -2
	add	iy, de
	ld	hl, (_Saul+12)
	add	hl, de
	ld	de, 5
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawHud
_drawHud:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 240
	push	hl
	ld	hl, 60
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 260
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw
_draw:
	ld	hl, -9
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, -60
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 60
	push	hl
	ld	hl, 320
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_drawRays3D
	call	_drawHud
	ld	a, (_k_al)
	bit	0, a
	jr	z, BB6_2
	call	_drawMap2D
	call	_drawPlayer
BB6_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gametick
_gametick:
	ld	hl, -40
	call	__frameset
	ld	iy, _pa
	ld	a, (_k_lf)
	bit	0, a
	lea	hl, iy + 3
	ld	(ix - 3), hl
	jp	z, BB7_9
	ld	e, -67
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	lea	hl, iy
	ld	(ix - 6), a
	ld	e, a
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB7_3
	ld	d, 0
	jr	BB7_4
BB7_3:
	ld	d, 1
BB7_4:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, 64
	call	__fadd
	bit	0, d
	jr	nz, BB7_6
	lea	bc, iy
BB7_6:
	bit	0, d
	jr	nz, BB7_8
	ld	a, (ix - 6)
BB7_8:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdy), bc
	ld	(_pdy+3), a
BB7_9:
	ld	a, (_k_rg)
	bit	0, a
	jr	nz, BB7_11
	ld	hl, (_pdy)
	ld	(ix - 12), hl
	ld	a, (_pdy+3)
	ld	(ix - 13), a
	jp	BB7_19
BB7_11:
	ld	e, 61
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	ld	hl, -3600432
	ld	e, 64
	ld	(ix - 6), a
	call	__fcmp
	jp	m, BB7_13
	ld	d, 0
	jr	BB7_14
BB7_13:
	ld	d, 1
BB7_14:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, -64
	call	__fadd
	bit	0, d
	jr	nz, BB7_16
	lea	bc, iy
BB7_16:
	bit	0, d
	jr	nz, BB7_18
	ld	a, (ix - 6)
BB7_18:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(ix - 12), bc
	ld	(_pdy), bc
	ld	(ix - 13), a
	ld	(_pdy+3), a
BB7_19:
	ld	iy, -20
	ld	hl, (_pdx)
	ld	a, (_pdx+3)
	ld	(ix - 22), hl
	ld	(ix - 23), a
	ld	e, a
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	(ix - 6), iy
	jp	m, BB7_21
	ld	iy, 20
BB7_21:
	ld	(ix - 16), iy
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB7_23
	ld	hl, 20
	ld	(ix - 6), hl
BB7_23:
	ld	bc, (_px)
	ld	a, (_px+3)
	ld	(ix - 33), bc
	ld	(ix - 34), a
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fmul
	call	__ftol
	push	bc
	pop	iy
	ld	(ix - 9), iy
	ld	bc, (_py)
	ld	a, (_py+3)
	ld	(ix - 29), bc
	ld	(ix - 30), a
	call	__fmul
	call	__ftol
	ld	(ix - 3), bc
	lea	hl, iy
	lea	bc, iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 26), bc
	ld	hl, (ix - 9)
	ld	de, (ix - 16)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 37), bc
	ld	hl, (ix - 3)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 19), bc
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	ld	(ix - 40), bc
	ld	hl, (ix - 3)
	ld	bc, (ix - 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 6), bc
	ld	a, (_k_up)
	bit	0, a
	jr	nz, BB7_25
	ld	iy, _map
	jp	BB7_29
BB7_25:
	ld	de, (ix - 9)
	ld	hl, (ix - 16)
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	ld	e, 60
	call	__fmul
	call	__ftol
	push	bc
	pop	de
	ld	iy, (_mapX)
	lea	hl, iy
	ld	bc, (ix - 19)
	call	__imulu
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_27
	ld	bc, (ix - 22)
	ld	a, (ix - 23)
	ld	hl, (ix - 33)
	ld	e, (ix - 34)
	call	__fadd
	ld	(ix - 33), bc
	ld	(_px), bc
	ld	(ix - 34), a
	ld	(_px+3), a
BB7_27:
	lea	hl, iy
	ld	bc, (ix - 40)
	call	__imulu
	ld	de, (ix - 26)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _map
	lea	hl, iy
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_29
	ld	bc, (ix - 12)
	ld	a, (ix - 13)
	ld	hl, (ix - 29)
	ld	e, (ix - 30)
	call	__fadd
	ld	(ix - 29), bc
	ld	(_py), bc
	ld	(ix - 30), a
	ld	(_py+3), a
BB7_29:
	ld	bc, (ix - 19)
	ld	a, (_k_dw)
	bit	0, a
	jr	z, BB7_34
	ld	hl, (_mapX)
	ld	(ix - 16), hl
	call	__imulu
	ld	de, (ix - 37)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_32
	ld	bc, (ix - 33)
	ld	a, (ix - 34)
	ld	hl, (ix - 22)
	ld	e, (ix - 23)
	call	__fsub
	ld	(_px), bc
	ld	(_px+3), a
BB7_32:
	ld	hl, (ix - 16)
	ld	bc, (ix - 6)
	call	__imulu
	ld	de, (ix - 26)
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_34
	ld	bc, (ix - 29)
	ld	a, (ix - 30)
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	call	__fsub
	ld	(_py), bc
	ld	(_py+3), a
BB7_34:
	ld	a, (_k_2n)
	bit	0, a
	jp	z, BB7_45
	ld	hl, (ix - 12)
	ld	e, (ix - 13)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	d, 1
	ld	iyl, a
	ld	a, d
	jp	m, BB7_37
	ld	a, iyl
BB7_37:
	ld	iyh, a
	ld	hl, (ix - 22)
	ld	e, (ix - 23)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	m, BB7_39
	ld	d, iyl
BB7_39:
	ld	bc, -30
	ld	a, iyh
	bit	0, a
	push	bc
	pop	hl
	ld	e, 60
	jr	nz, BB7_41
	ld	hl, 30
BB7_41:
	bit	0, d
	jr	nz, BB7_43
	ld	bc, 30
BB7_43:
	ld	(ix - 6), bc
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	ld	(ix - 3), bc
	ld	bc, (ix - 9)
	ld	hl, (ix - 6)
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -8388608
	call	__fmul
	call	__ftol
	push	bc
	pop	de
	ld	hl, (_mapX)
	ld	bc, (ix - 3)
	call	__imulu
	add	hl, de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _map
	add	iy, de
	ld	hl, (iy)
	ld	de, 130
	or	a, a
	sbc	hl, de
	jr	nz, BB7_45
	or	a, a
	sbc	hl, hl
	ld	(iy), hl
BB7_45:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_kctick
_kctick:
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 3
	call	__bshru
	and	a, 1
	ld	(_k_up), a
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, 1
	ld	(_k_dw), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	srl	a
	and	a, 1
	ld	(_k_lf), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	dec	b
	call	__bshru
	and	a, 1
	ld	(_k_rg), a
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 5
	call	__bshru
	and	a, 1
	ld	(_k_2n), a
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 7
	call	__bshru
	ld	(_k_al), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB8_2
	ld	a, 1
	ld	(_ccd), a
BB8_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_init
_init:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 2097152
	ld	(_px), hl
	ld	a, 66
	ld	(_px+3), a
	ld	(_py), hl
	ld	(_py+3), a
	or	a, a
	sbc	hl, hl
	ld	(_pa), hl
	ld	e, h
	ld	a, e
	ld	(_pa+3), a
	ld	bc, -6291456
	ld	(_pdx), bc
	ld	a, 64
	ld	(_pdx+3), a
	ld	(_pdy), hl
	ld	a, e
	ld	(_pdy+3), a
	inc	hl
	ld	(_Saul), hl
	ld	hl, 192
	ld	(_Saul+9), hl
	ld	hl, 40
	ld	(_Saul+12), hl
	ld	hl, 20
	ld	(_Saul+15), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	call	_init
BB10_1:
	ld	a, (_ccd)
	bit	0, a
	jr	nz, BB10_3
	call	_draw
	call	_gfx_SwapDraw
	call	_gametick
	call	_kctick
	jr	BB10_1
BB10_3:
	call	_gfx_End
	ld	iy, -3145600
	call	_os_ClrLCD
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	a, (_lost)
	bit	0, a
	jr	z, BB10_6
	ld	hl, _.str
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	iy, -3145600
	call	_os_NewLine
	ld	hl, _.str.1
	push	hl
	call	_os_PutStrFull
	pop	hl
BB10_5:
	call	_os_GetCSC
	or	a, a
	jr	z, BB10_5
BB10_6:
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_k_al
_k_al:
	rb	1

	section	.bss,"aw",@nobits
	public	_ccd
_ccd:
	rb	1

	section	.bss,"aw",@nobits
	public	_lost
_lost:
	rb	1

	section	.rodata,"a",@progbits
	public	_SCWIDTH
_SCWIDTH:
	dl	106

	section	.rodata,"a",@progbits
	public	_SCHEIGHT
_SCHEIGHT:
	dl	48

	section	.data,"aw",@progbits
	public	_SCALEFACTOR
_SCALEFACTOR:
	dl	5

	section	.data,"aw",@progbits
	public	_mapX
_mapX:
	dl	8

	section	.data,"aw",@progbits
	public	_mapY
_mapY:
	dl	8

	section	.data,"aw",@progbits
	public	_mapS
_mapS:
	dl	32

	section	.data,"aw",@progbits
	public	_map
_map:
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	164
	dl	164
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	164
	dl	164
	dl	0
	dl	0
	dl	165
	dl	165
	dl	165
	dl	130
	dl	164
	dl	164
	dl	0
	dl	0
	dl	165
	dl	165
	dl	165
	dl	0
	dl	164
	dl	164
	dl	0
	dl	0
	dl	165
	dl	165
	dl	0
	dl	0
	dl	164
	dl	164
	dl	0
	dl	0
	dl	130
	dl	0
	dl	0
	dl	0
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164
	dl	164

	section	.data,"aw",@progbits
	public	_SaulTex
_SaulTex:
	dl	229
	dl	197
	dl	196
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	97
	dl	196
	dl	197
	dl	229
	dl	229
	dl	197
	dl	196
	dl	97
	dl	97
	dl	97
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	97
	dl	196
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	97
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	97
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	238
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	97
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	238
	dl	238
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	238
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	65
	dl	0
	dl	65
	dl	237
	dl	237
	dl	237
	dl	65
	dl	0
	dl	65
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	238
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	237
	dl	237
	dl	236
	dl	236
	dl	236
	dl	236
	dl	236
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	97
	dl	237
	dl	237
	dl	237
	dl	236
	dl	236
	dl	236
	dl	236
	dl	236
	dl	237
	dl	237
	dl	97
	dl	197
	dl	229
	dl	229
	dl	197
	dl	196
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	196
	dl	197
	dl	229
	dl	229
	dl	197
	dl	196
	dl	196
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	196
	dl	196
	dl	197
	dl	229
	dl	229
	dl	197
	dl	196
	dl	196
	dl	196
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	196
	dl	196
	dl	196
	dl	197
	dl	229
	dl	229
	dl	197
	dl	196
	dl	196
	dl	196
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	237
	dl	196
	dl	196
	dl	196
	dl	197
	dl	229

	section	.bss,"aw",@nobits
	public	_Saul
_Saul:
	rb	18

	section	.bss,"aw",@nobits
	public	_px
_px:
	rb	4

	section	.bss,"aw",@nobits
	public	_py
_py:
	rb	4

	section	.bss,"aw",@nobits
	public	_pa
_pa:
	rb	4

	section	.bss,"aw",@nobits
	public	_depth
_depth:
	rb	39

	section	.bss,"aw",@nobits
	public	_pdx
_pdx:
	rb	4

	section	.bss,"aw",@nobits
	public	_pdy
_pdy:
	rb	4

	section	.bss,"aw",@nobits
	public	_k_lf
_k_lf:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_rg
_k_rg:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_up
_k_up:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_dw
_k_dw:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_2n
_k_2n:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"You lost...", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press any key to exit", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6d9aa7a16db70f3d02ae304b08d4a03011281fef)"
	extern	_fabsf
	extern	__Unwind_SjLj_Register
	extern	_gfx_Begin
	extern	_gfx_Line
	extern	__fadd
	extern	_tan
	extern	_os_DrawStatusBar
	extern	__ishl
	extern	__ftol
	extern	__idivs
	extern	__setflag
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_os_PutStrFull
	extern	__ltof
	extern	__ineg
	extern	_os_GetCSC
	extern	__fsub
	extern	_os_HomeUp
	extern	__bdivu
	extern	__frameset
	extern	_sin
	extern	_kb_Scan
	extern	_sqrt
	extern	_os_ClrLCD
	extern	__ishru
	extern	__ishrs
	extern	__fmul
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__fneg
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_os_NewLine
	extern	_gfx_End
	extern	__bshru
	extern	__fcmp
	extern	_cos
	extern	__frameset0
