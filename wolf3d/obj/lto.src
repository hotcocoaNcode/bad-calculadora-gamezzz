	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_drawPixelScale5
_drawPixelScale5:
	call	__frameset0
	ld	a, (ix + 12)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 6)
	ld	bc, 5
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	call	__imulu
	push	bc
	push	bc
	push	hl
	push	de
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawRays3D
_drawRays3D:
	ld	hl, -88
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	e, 64
	ld	iy, -64
	ld	bc, (_px)
	ld	a, (_px+3)
	call	__fmul
	ld	(ix - 15), bc
	ld	(ix - 17), a
	ld	bc, (_py)
	ld	a, (_py+3)
	call	__fmul
	ld	(ix - 12), bc
	ld	d, a
	ld	hl, (_pa)
	ld	(ix - 6), hl
	ld	a, (_pa+3)
	ld	l, a
	ld	(ix - 3), hl
	ld	a, d
	call	__ftol
	ld	(ix - 9), bc
	push	bc
	pop	hl
	lea	bc, iy
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	e, -72
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 12)
	ld	a, d
	ld	(ix - 67), hl
	ld	(ix - 68), e
	call	__fsub
	ld	(ix - 71), bc
	ld	(ix - 72), a
	ld	bc, 64
	ld	hl, (ix - 9)
	add	hl, bc
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 12)
	ld	(ix - 22), d
	ld	a, d
	ld	(ix - 75), hl
	ld	(ix - 76), e
	call	__fsub
	ld	(ix - 79), bc
	ld	(ix - 80), a
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, (ix - 3)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	a, 1
	ld	l, b
	jr	z, BB1_2
	ld	a, l
BB1_2:
	ld	(ix - 9), a
	lea	hl, iy
	ld	de, (ix - 3)
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	ld	h, 1
	jr	z, BB1_4
	ld	h, 0
BB1_4:
	ld	bc, 8
	ld	e, 63
	ld	a, (ix - 9)
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	h
	sbc	a, a
	ld	h, a
	ld	a, l
	or	a, h
	ld	(ix - 40), a
	bit	0, a
	ld	(ix - 39), bc
	jr	nz, BB1_6
	or	a, a
	sbc	hl, hl
	ld	(ix - 39), hl
BB1_6:
	ld	iy, (ix - 15)
	lea	bc, iy
	ld	d, (ix - 17)
	ld	a, d
	or	a, a
	sbc	hl, hl
	call	__fmul
	call	__ftol
	ld	(ix - 43), bc
	ld	bc, (ix - 12)
	ld	a, (ix - 22)
	call	__fmul
	call	__ftol
	ld	(ix - 46), bc
	lea	bc, iy
	ld	a, d
	call	__ftol
	ld	(ix - 9), bc
	push	bc
	pop	hl
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -3033321
	ld	e, -72
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 15)
	ld	a, d
	ld	(ix - 83), hl
	ld	(ix - 84), e
	call	__fsub
	ld	(ix - 87), bc
	ld	(ix - 88), a
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, -3600432
	ld	a, 63
	call	__fcmp
	jp	m, BB1_8
	ld	a, 0
	jr	BB1_9
BB1_8:
	ld	a, 1
BB1_9:
	ld	(ix - 56), a
	ld	bc, 64
	ld	hl, (ix - 9)
	ld	d, 1
	add	hl, bc
	ld	bc, -64
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 15)
	ld	a, (ix - 17)
	ld	(ix - 59), hl
	ld	(ix - 60), e
	call	__fsub
	ld	(ix - 63), bc
	ld	(ix - 64), a
BB1_10:
	ld	hl, (ix - 6)
	ld	bc, (ix - 3)
	bit	0, d
	jp	z, BB1_53
	push	bc
	push	hl
	call	_tan
	pop	bc
	pop	bc
	ld	bc, -8388608
	ld	a, -65
	call	__fdiv
	ld	(ix - 25), bc
	ld	d, a
	ld	hl, 4788176
	ld	a, 64
	ld	e, a
	ld	bc, (ix - 6)
	ld	iy, (ix - 3)
	ld	a, iyl
	call	__fcmp
	jp	p, BB1_13
	ld	bc, (ix - 71)
	ld	a, (ix - 72)
	ld	iy, (ix - 25)
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, (ix - 17)
	call	__fadd
	ld	(ix - 21), bc
	ld	(ix - 18), a
	lea	bc, iy
	ld	a, d
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 31), bc
	ld	(ix - 35), a
	ld	bc, (ix - 67)
	ld	(ix - 9), bc
	ld	a, (ix - 68)
	ld	(ix - 16), a
	ld	(ix - 34), hl
	ld	a, -62
	ld	(ix - 36), a
BB1_13:
	ld	iyl, d
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, 4788176
	ld	a, 64
	call	__fcmp
	ld	bc, (ix - 9)
	jp	p, BB1_15
	ld	bc, (ix - 79)
	ld	a, (ix - 80)
	ld	hl, (ix - 25)
	ld	e, iyl
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, (ix - 17)
	call	__fadd
	ld	(ix - 21), bc
	ld	(ix - 18), a
	ld	bc, (ix - 25)
	ld	a, iyl
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 31), bc
	ld	(ix - 35), a
	ld	bc, (ix - 75)
	ld	a, (ix - 76)
	ld	(ix - 16), a
	ld	(ix - 34), hl
	ld	a, 66
	ld	(ix - 36), a
BB1_15:
	ld	a, (ix - 40)
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB1_17
	ld	hl, (ix - 21)
BB1_17:
	ld	(ix - 9), hl
	bit	0, a
	push	af
	ld	a, (ix - 17)
	ld	iyl, a
	pop	af
	ld	l, (ix - 18)
	jr	nz, BB1_19
	ex	de, hl
	ld	iyl, e
	ex	de, hl
BB1_19:
	bit	0, a
	ld	de, (ix - 12)
	jr	nz, BB1_21
	push	bc
	pop	de
BB1_21:
	bit	0, a
	push	af
	ld	a, (ix - 22)
	ld	iyh, a
	pop	af
	jr	nz, BB1_23
	push	af
	ld	a, (ix - 16)
	ld	iyh, a
	pop	af
BB1_23:
	ld	bc, (_mapX)
	ld	hl, (_mapY)
	ld	(ix - 49), bc
	call	__imulu
	ld	(ix - 55), hl
	ld	hl, (ix - 39)
	ld	(ix - 28), hl
	ld	hl, (ix - 9)
BB1_24:
	ld	(ix - 9), hl
	push	hl
	pop	bc
	push	af
	ld	a, iyl
	ld	(ix - 16), a
	pop	af
	ld	a, iyl
	call	__ftol
	push	bc
	pop	hl
	ld	iyl, 6
	ld	c, iyl
	call	__ishrs
	ld	(ix - 25), hl
	ld	(ix - 21), de
	push	de
	pop	bc
	push	af
	ld	a, iyh
	ld	(ix - 18), a
	pop	af
	ld	a, iyh
	call	__ftol
	push	bc
	pop	hl
	ld	c, iyl
	call	__ishrs
	ld	bc, (ix - 49)
	call	__imulu
	ld	de, (ix - 25)
	add	hl, de
	ld	(ix - 25), hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	(ix - 52), hl
	ld	bc, (ix - 28)
	push	bc
	pop	hl
BB1_25:
	push	hl
	pop	iy
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB1_30
	ld	hl, (ix - 25)
	ld	de, (ix - 55)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB1_28
	ld	hl, (ix - 52)
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, 8
	jr	z, BB1_25
	jr	BB1_29
BB1_28:
	push	bc
	pop	iy
BB1_29:
	ld	bc, (ix - 31)
	ld	a, (ix - 35)
	ld	hl, (ix - 9)
	ld	e, (ix - 16)
	call	__fadd
	ld	(ix - 9), bc
	ld	(ix - 16), a
	ld	bc, (ix - 34)
	ld	a, (ix - 36)
	ld	hl, (ix - 21)
	ld	e, (ix - 18)
	call	__fadd
	ld	hl, (ix - 9)
	push	bc
	pop	de
	inc	iy
	ld	(ix - 28), iy
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
	ld	iyh, a
	jp	BB1_24
BB1_30:
	ld	hl, 103
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix - 9)
	ld	a, (ix - 16)
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fmul
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 21)
	ld	a, (ix - 18)
	call	__fmul
	call	__ftol
	push	bc
	push	iy
	ld	hl, (ix - 46)
	push	hl
	ld	hl, (ix - 43)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_tan
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	(ix - 25), bc
	ld	(ix - 28), a
	call	__fneg
	ld	(ix - 49), bc
	ld	(ix - 52), a
	ld	hl, -3600432
	ld	e, 63
	ld	bc, (ix - 6)
	ld	iy, (ix - 3)
	ld	a, iyl
	call	__fcmp
	jp	p, BB1_33
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, -6894628
	ld	a, 64
	call	__fcmp
	ld	d, (ix - 18)
	ld	a, (ix - 16)
	ld	iy, (ix - 25)
	jp	p, BB1_34
	ld	bc, (ix - 87)
	ld	a, (ix - 88)
	ld	hl, (ix - 49)
	ld	e, (ix - 52)
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 22)
	call	__fadd
	ld	(ix - 21), bc
	ld	d, a
	lea	bc, iy
	ld	a, (ix - 28)
	ld	hl, -8388608
	ld	e, -62
	call	__fmul
	ld	(ix - 34), bc
	ld	(ix - 36), a
	ld	bc, (ix - 83)
	ld	(ix - 9), bc
	ld	a, (ix - 84)
	ld	(ix - 31), hl
	ld	(ix - 35), e
	jr	BB1_34
BB1_33:
	ld	d, (ix - 18)
	ld	a, (ix - 16)
	ld	iy, (ix - 25)
BB1_34:
	bit	0, (ix - 56)
	jr	nz, BB1_36
	ld	hl, -6894628
	ld	e, 64
	ld	bc, (ix - 6)
	ld	(ix - 18), d
	ld	d, a
	ld	iy, (ix - 3)
	ld	a, iyl
	ld	iyl, d
	ld	d, (ix - 18)
	call	__fcmp
	jp	p, BB1_37
BB1_36:
	ld	bc, (ix - 63)
	ld	a, (ix - 64)
	ld	hl, (ix - 49)
	ld	e, (ix - 52)
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 22)
	call	__fadd
	ld	(ix - 21), bc
	ld	d, a
	ld	bc, (ix - 25)
	ld	a, (ix - 28)
	ld	hl, -8388608
	ld	e, 66
	call	__fmul
	ld	(ix - 34), bc
	ld	(ix - 36), a
	ld	bc, (ix - 59)
	ld	(ix - 9), bc
	push	af
	ld	a, (ix - 60)
	ld	iyl, a
	pop	af
	ld	(ix - 31), hl
	ld	(ix - 35), e
BB1_37:
	ld	l, d
	ld	a, (ix - 40)
	bit	0, a
	ld	de, (ix - 15)
	jr	nz, BB1_39
	ld	de, (ix - 9)
BB1_39:
	bit	0, a
	push	af
	ld	a, (ix - 17)
	ld	iyh, a
	pop	af
	jr	nz, BB1_41
	ld	iyh, iyl
BB1_41:
	bit	0, a
	ld	bc, (ix - 12)
	jr	nz, BB1_43
	ld	bc, (ix - 21)
BB1_43:
	ld	(ix - 9), bc
	bit	0, a
	push	af
	ld	a, (ix - 22)
	ld	iyl, a
	pop	af
	jr	nz, BB1_45
	ex	de, hl
	ld	iyl, e
	ex	de, hl
BB1_45:
	ld	bc, (_mapY)
	ld	hl, (_mapX)
	ld	(ix - 49), bc
	call	__imulu
	ld	(ix - 55), hl
	ld	hl, (ix - 39)
	ld	(ix - 28), hl
	ld	bc, (ix - 9)
BB1_46:
	ld	(ix - 9), bc
	push	af
	ld	a, iyl
	ld	(ix - 16), a
	pop	af
	ld	a, iyl
	call	__ftol
	push	bc
	pop	hl
	ld	iyl, 6
	ld	c, iyl
	call	__ishrs
	ld	(ix - 25), hl
	ld	(ix - 21), de
	push	de
	pop	bc
	push	af
	ld	a, iyh
	ld	(ix - 18), a
	pop	af
	ld	a, iyh
	call	__ftol
	push	bc
	pop	hl
	ld	c, iyl
	call	__ishrs
	ld	bc, (ix - 49)
	call	__imulu
	ld	de, (ix - 25)
	add	hl, de
	ld	(ix - 25), hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	(ix - 52), hl
	ld	bc, (ix - 28)
	push	bc
	pop	hl
BB1_47:
	push	hl
	pop	iy
	ld	de, 8
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB1_52
	ld	hl, (ix - 25)
	ld	de, (ix - 55)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB1_50
	ld	hl, (ix - 52)
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, 8
	jr	z, BB1_47
	jr	BB1_51
BB1_50:
	push	bc
	pop	iy
BB1_51:
	ld	bc, (ix - 34)
	ld	a, (ix - 36)
	ld	hl, (ix - 9)
	ld	e, (ix - 16)
	call	__fadd
	ld	(ix - 9), bc
	ld	(ix - 16), a
	ld	bc, (ix - 31)
	ld	a, (ix - 35)
	ld	hl, (ix - 21)
	ld	e, (ix - 18)
	call	__fadd
	push	bc
	pop	de
	ld	bc, (ix - 9)
	inc	iy
	ld	(ix - 28), iy
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
	ld	iyh, a
	jp	BB1_46
BB1_52:
	ld	hl, -32
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix - 21)
	ld	a, (ix - 18)
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fmul
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 9)
	ld	a, (ix - 16)
	call	__fmul
	call	__ftol
	push	bc
	push	iy
	ld	hl, (ix - 46)
	push	hl
	ld	hl, (ix - 43)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	d, 0
	jp	BB1_10
BB1_53:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMap2D
_drawMap2D:
	ld	hl, -6
	call	__frameset
	ld	iy, 0
BB2_1:
	ld	bc, (_mapY)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB2_8
	ld	de, 0
BB2_3:
	ld	bc, (_mapX)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB2_7
	ld	(ix - 3), iy
	lea	hl, iy
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 6), de
	ex	de, hl
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _map
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, -1
	jr	z, BB2_6
	ld	hl, 0
BB2_6:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, (_mapS)
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__imulu
	push	hl
	pop	iy
	push	de
	pop	hl
	ld	bc, (ix - 3)
	call	__imulu
	inc	iy
	inc	hl
	dec	de
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	de, (ix - 6)
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	inc	de
	jr	BB2_3
BB2_7:
	inc	iy
	jp	BB2_1
BB2_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPlayer
_drawPlayer:
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (_px)
	ld	a, (_px+3)
	or	a, a
	sbc	hl, hl
	ld	e, -64
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (_py)
	ld	a, (_py+3)
	call	__fadd
	call	__ftol
	ld	hl, 5
	push	hl
	push	hl
	push	bc
	push	iy
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw
_draw:
	ld	hl, 74
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_drawMap2D
	call	_drawPlayer
	jp	_drawRays3D
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gametick
_gametick:
	ld	hl, -6
	call	__frameset
	ld	iy, _pa
	ld	d, 0
	ld	a, (_k_lf)
	bit	0, a
	lea	hl, iy + 3
	ld	(ix - 3), hl
	jp	z, BB5_9
	ld	e, -67
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	lea	hl, iy
	ld	(ix - 6), a
	ld	e, a
	ld	bc, 0
	ld	a, d
	call	__fcmp
	jp	m, BB5_3
	ld	d, 0
	jr	BB5_4
BB5_3:
	ld	d, 1
BB5_4:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, 64
	call	__fadd
	bit	0, d
	jr	nz, BB5_6
	lea	bc, iy
BB5_6:
	bit	0, d
	jr	nz, BB5_8
	ld	a, (ix - 6)
BB5_8:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdy), bc
	ld	(_pdy+3), a
BB5_9:
	ld	iy, _px
	ld	a, (_k_rg)
	bit	0, a
	jp	z, BB5_18
	ld	e, 61
	ld	bc, (_pa)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, -3355443
	call	__fadd
	push	bc
	pop	iy
	ld	hl, -3600432
	ld	e, 64
	ld	(ix - 6), a
	call	__fcmp
	jp	m, BB5_12
	ld	d, 0
	jr	BB5_13
BB5_12:
	ld	d, 1
BB5_13:
	lea	bc, iy
	ld	a, (ix - 6)
	ld	hl, -3600432
	ld	e, -64
	call	__fadd
	bit	0, d
	jr	nz, BB5_15
	lea	bc, iy
BB5_15:
	bit	0, d
	jr	nz, BB5_17
	ld	a, (ix - 6)
BB5_17:
	ld	(_pa), bc
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	l, a
	push	hl
	push	bc
	call	_cos
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdx), bc
	ld	(_pdx+3), a
	ld	hl, (_pa)
	ld	a, (_pa+3)
	ld	e, a
	push	de
	push	hl
	call	_sin
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -6291456
	ld	e, 64
	call	__fmul
	ld	(_pdy), bc
	ld	(_pdy+3), a
	ld	iy, _px
BB5_18:
	ld	a, (_k_up)
	bit	0, a
	lea	hl, iy + 3
	ld	(ix - 3), hl
	ld	iy, _py
	lea	hl, iy + 3
	ld	(ix - 6), hl
	jr	z, BB5_20
	ld	bc, (_pdx)
	ld	a, (_pdx+3)
	ld	hl, (_px)
	ld	iy, (ix - 3)
	ld	e, (iy)
	call	__fadd
	ld	(_px), bc
	ld	(_px+3), a
	ld	bc, (_pdy)
	ld	a, (_pdy+3)
	ld	hl, (_py)
	ld	iy, (ix - 6)
	ld	e, (iy)
	call	__fadd
	ld	(_py), bc
	ld	(_py+3), a
BB5_20:
	ld	a, (_k_dw)
	bit	0, a
	jr	z, BB5_22
	ld	hl, (_pdx)
	ld	a, (_pdx+3)
	ld	e, a
	ld	bc, (_px)
	ld	iy, (ix - 3)
	ld	a, (iy)
	call	__fsub
	ld	(_px), bc
	ld	(_px+3), a
	ld	hl, (_pdy)
	ld	a, (_pdy+3)
	ld	e, a
	ld	bc, (_py)
	ld	iy, (ix - 6)
	ld	a, (iy)
	call	__fsub
	ld	(_py), bc
	ld	(_py+3), a
BB5_22:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_kctick
_kctick:
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 3
	call	__bshru
	and	a, 1
	ld	(_k_up), a
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, 1
	ld	(_k_dw), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	srl	a
	and	a, 1
	ld	(_k_lf), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	dec	b
	call	__bshru
	and	a, 1
	ld	(_k_rg), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB6_2
	ld	a, 1
	ld	(_ccd), a
BB6_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_init
_init:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, -1048576
	ld	(_px), hl
	ld	a, 65
	ld	(_px+3), a
	ld	(_py), hl
	ld	(_py+3), a
	or	a, a
	sbc	hl, hl
	ld	(_pa), hl
	ld	e, h
	ld	a, e
	ld	(_pa+3), a
	ld	bc, -6291456
	ld	(_pdx), bc
	ld	a, 64
	ld	(_pdx+3), a
	ld	(_pdy), hl
	ld	a, e
	ld	(_pdy+3), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	call	_init
BB8_1:
	ld	a, (_ccd)
	bit	0, a
	jr	nz, BB8_3
	call	_draw
	call	_gfx_SwapDraw
	call	_gametick
	call	_kctick
	jr	BB8_1
BB8_3:
	call	_gfx_End
	ld	iy, -3145600
	call	_os_ClrLCD
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	a, (_lost)
	bit	0, a
	jr	z, BB8_5
	ld	hl, _.str
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	iy, -3145600
	call	_os_NewLine
	ld	hl, _.str.1
	push	hl
	call	_os_PutStrFull
	pop	hl
BB8_5:
	call	_os_GetCSC
	or	a, a
	jr	z, BB8_5
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_k_rg
_k_rg:
	rb	1

	section	.bss,"aw",@nobits
	public	_ccd
_ccd:
	rb	1

	section	.bss,"aw",@nobits
	public	_lost
_lost:
	rb	1

	section	.rodata,"a",@progbits
	public	_pi
_pi:
	dd	0x40490fd0

	section	.rodata,"a",@progbits
	public	_pi2
_pi2:
	dd	0x3fc90fd0

	section	.rodata,"a",@progbits
	public	_pi3
_pi3:
	dd	0x4096cbdc

	section	.data,"aw",@progbits
	public	_SCWIDTH
_SCWIDTH:
	dl	106

	section	.data,"aw",@progbits
	public	_SCHEIGHT
_SCHEIGHT:
	dl	48

	section	.data,"aw",@progbits
	public	_SCALEFACTOR
_SCALEFACTOR:
	dl	5

	section	.data,"aw",@progbits
	public	_mapX
_mapX:
	dl	8

	section	.data,"aw",@progbits
	public	_mapY
_mapY:
	dl	8

	section	.data,"aw",@progbits
	public	_mapS
_mapS:
	dl	32

	section	.data,"aw",@progbits
	public	_map
_map:
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	0
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	1
	dl	0
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	1
	dl	0
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	0
	dl	1
	dl	1
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1
	dl	1

	section	.bss,"aw",@nobits
	public	_px
_px:
	rb	4

	section	.bss,"aw",@nobits
	public	_py
_py:
	rb	4

	section	.bss,"aw",@nobits
	public	_pa
_pa:
	rb	4

	section	.bss,"aw",@nobits
	public	_k_lf
_k_lf:
	rb	1

	section	.bss,"aw",@nobits
	public	_pdx
_pdx:
	rb	4

	section	.bss,"aw",@nobits
	public	_pdy
_pdy:
	rb	4

	section	.bss,"aw",@nobits
	public	_k_up
_k_up:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_dw
_k_dw:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"You lost...", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press any key to exit", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6d9aa7a16db70f3d02ae304b08d4a03011281fef)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	__fadd
	extern	_gfx_Line
	extern	_sin
	extern	_kb_Scan
	extern	_gfx_Begin
	extern	_os_ClrLCD
	extern	_tan
	extern	__ishrs
	extern	_os_DrawStatusBar
	extern	__fmul
	extern	__ftol
	extern	_gfx_SetDraw
	extern	__setflag
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_SwapDraw
	extern	__iand
	extern	__fneg
	extern	_gfx_FillRectangle
	extern	_os_PutStrFull
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_os_NewLine
	extern	__ltof
	extern	_os_GetCSC
	extern	_gfx_End
	extern	__bshru
	extern	__fcmp
	extern	__frameset0
	extern	_cos
	extern	__fsub
	extern	_os_HomeUp
