	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_drawPixel
_drawPixel:
	call	__frameset0
	ld	a, (ix + 12)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 6)
	ld	bc, 5
	call	__imulu
	push	hl
	pop	iy
	ld	de, 2
	add	iy, de
	ld	hl, (ix + 9)
	call	__imulu
	add	hl, de
	ld	de, 5
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawWallLine
_drawWallLine:
	ld	hl, -9
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 9), hl
	ld	hl, (ix + 9)
	ld	(ix - 6), hl
	ld	hl, (ix + 12)
	ld	(ix - 3), hl
	ld	a, (ix + 15)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 9)
	ld	bc, 5
	call	__imulu
	ld	de, 2
	add	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (ix - 3)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 9)
	ld	(ix + 6), hl
	ld	(ix + 9), iy
	ld	hl, 5
	ld	(ix + 12), hl
	ld	(ix + 15), de
	ld	sp, ix
	pop	ix
	jp	_gfx_FillRectangle
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_clipBehindPlayer
_clipBehindPlayer:
	ld	hl, -8
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, (hl)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 3), bc
	ld	d, a
	ld	hl, (ix + 18)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	iy, (ix - 3)
	lea	bc, iy
	ld	a, d
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy
	ld	a, d
	call	__fdiv
	ld	(ix - 3), bc
	ld	(ix - 4), a
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 7), bc
	ld	(ix - 8), a
	ld	hl, (ix + 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	call	__fmul
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fadd
	call	__ftol
	ld	hl, (ix + 6)
	ld	(hl), bc
	ld	hl, (ix + 9)
	ld	de, (hl)
	push	de
	pop	hl
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 7), bc
	ld	(ix - 8), a
	ld	hl, (ix + 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	call	__fmul
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fadd
	call	__ftol
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_2
	ld	bc, 1
BB2_2:
	ld	hl, (ix + 9)
	ld	(hl), bc
	ld	hl, (ix + 12)
	ld	de, (hl)
	push	de
	pop	hl
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 7), bc
	ld	(ix - 8), a
	ld	hl, (ix + 21)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	call	__fmul
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fadd
	call	__ftol
	ld	hl, (ix + 12)
	ld	(hl), bc
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawWall
_drawWall:
	ld	hl, -39
	call	__frameset
	ld	bc, (ix + 6)
	ld	iy, (ix + 9)
	ld	de, (ix + 12)
	ld	hl, (ix + 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix + 21)
	ld	de, (ix + 18)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), hl
	ld	de, 0
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	hl, 1
	ld	(ix - 3), hl
	ld	iy, 1
	jp	m, BB3_2
	ld	iy, (ix + 6)
BB3_2:
	ld	de, 1
	ld	bc, (ix + 9)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB3_4
	ld	bc, 0
BB3_4:
	ld	de, (_SCWIDTH)
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_6
	push	de
	pop	iy
BB3_6:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_8
	push	de
	pop	bc
BB3_8:
	push	bc
	pop	de
	ld	(ix - 9), iy
	ld	hl, (ix + 9)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	jr	z, BB3_10
	ld	hl, (ix - 15)
	ld	(ix - 3), hl
BB3_10:
	ld	bc, (ix - 12)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 15), bc
	ld	(ix - 16), a
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 19), bc
	ld	(ix - 20), a
	ld	hl, (ix + 12)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 23), bc
	ld	(ix - 24), a
	ld	bc, (ix - 6)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 27), bc
	ld	(ix - 28), a
	ld	hl, (ix + 18)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 31), bc
	ld	(ix - 32), a
	push	de
	pop	iy
	lea	hl, iy
	ld	bc, (ix - 9)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_12
	lea	de, iy
BB3_12:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	iy
	ld	de, 0
BB3_13:
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy
	add	hl, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB3_23
	ld	(ix - 35), iy
	ld	(ix - 38), de
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	de
	pop	bc
	ld	a, l
	call	__ltof
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fadd
	ld	(ix - 12), bc
	ld	(ix - 39), a
	ld	hl, (ix - 15)
	ld	e, (ix - 16)
	call	__fmul
	ld	iy, (ix - 19)
	lea	hl, iy
	ld	d, (ix - 20)
	ld	e, d
	call	__fdiv
	ld	hl, (ix - 23)
	ld	e, (ix - 24)
	call	__fadd
	call	__ftol
	ld	(ix - 6), bc
	ld	bc, (ix - 12)
	ld	a, (ix - 39)
	ld	hl, (ix - 27)
	ld	e, (ix - 28)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fdiv
	ld	hl, (ix - 31)
	ld	e, (ix - 32)
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB3_16
	ld	bc, 0
BB3_16:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB3_18
	ld	iy, 0
BB3_18:
	ld	de, (_SCHEIGHT)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_20
	push	de
	pop	bc
BB3_20:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_22
	push	de
	pop	iy
BB3_22:
	ld	(ix - 12), iy
	ld	hl, 255
	push	hl
	push	bc
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 6), bc
	call	_drawPixel
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 255
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_drawPixel
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 12)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	bc, 255
	push	bc
	push	hl
	push	de
	ld	hl, (ix - 3)
	push	hl
	call	_drawWallLine
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 38)
	inc	de
	ld	bc, (ix - 9)
	ld	iy, (ix - 35)
	jp	BB3_13
BB3_23:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw
_draw:
	ld	hl, -70
	call	__frameset
	ld	iy, _M
	ld	hl, (_P+9)
	ld	c, 2
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (iy)
	ld	(ix - 39), hl
	ld	a, (iy + 3)
	ld	(ix - 42), a
	ld	iy, _M+1440
	add	iy, bc
	ld	hl, (iy)
	ld	(ix - 48), hl
	ld	a, (iy + 3)
	ld	(ix - 51), a
	ld	de, (_P)
	ld	hl, 40
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (_P+3)
	ld	hl, 10
	or	a, a
	sbc	hl, de
	ld	(ix - 54), hl
	ld	hl, 290
	or	a, a
	sbc	hl, de
	ld	(ix - 60), hl
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 45), bc
	ld	d, a
	ld	hl, (ix - 54)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	(ix - 54), hl
	ld	e, a
	ld	(ix - 57), e
	ld	bc, (ix - 48)
	ld	a, (ix - 51)
	call	__fneg
	ld	(ix - 69), bc
	ld	(ix - 70), a
	call	__fmul
	push	bc
	pop	iy
	ld	(ix - 63), a
	ld	bc, (ix - 45)
	ld	a, d
	ld	hl, (ix - 39)
	ld	e, (ix - 42)
	call	__fmul
	lea	hl, iy
	ld	e, (ix - 63)
	call	__fadd
	call	__ftol
	ld	(ix - 66), bc
	ld	(ix - 12), bc
	ld	hl, (ix - 60)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	(ix - 60), hl
	ld	e, a
	ld	(ix - 63), e
	ld	bc, (ix - 69)
	ld	a, (ix - 70)
	call	__fmul
	push	bc
	pop	iy
	ld	(ix - 69), a
	ld	bc, (ix - 45)
	ld	a, d
	ld	hl, (ix - 39)
	ld	e, (ix - 42)
	call	__fmul
	lea	hl, iy
	ld	e, (ix - 69)
	call	__fadd
	call	__ftol
	ld	(ix - 9), bc
	ld	hl, (ix - 66)
	ld	(ix - 6), hl
	ld	(ix - 66), bc
	ld	(ix - 3), bc
	ld	bc, (ix - 48)
	ld	a, (ix - 51)
	ld	hl, (ix - 45)
	ld	e, d
	call	__fmul
	push	bc
	pop	iy
	ld	(ix - 45), iy
	ld	d, a
	ld	bc, (ix - 54)
	ld	a, (ix - 57)
	ld	hl, (ix - 39)
	ld	e, (ix - 42)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	(ix - 24), iy
	ld	bc, (ix - 60)
	ld	a, (ix - 63)
	ld	hl, (ix - 39)
	ld	e, (ix - 42)
	call	__fmul
	ld	hl, (ix - 45)
	ld	e, d
	call	__fadd
	call	__ftol
	ld	(ix - 21), bc
	ld	hl, (_P+6)
	call	__ineg
	ld	(ix - 36), hl
	ld	(ix - 48), hl
	ld	(ix - 33), hl
	lea	hl, iy
	ld	de, 40
	add	hl, de
	ld	(ix - 18), hl
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 15), hl
	ld	de, 1
	ld	(ix - 42), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB4_2
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB4_8
BB4_2:
	ld	(ix - 39), bc
	lea	hl, ix - 12
	ld	(ix - 45), hl
	lea	de, ix - 24
	lea	iy, ix - 36
	ld	hl, (ix - 42)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	(ix - 51), de
	ld	(ix - 54), iy
	jp	p, BB4_4
	ld	hl, (ix - 48)
	push	hl
	ld	hl, (ix - 39)
	push	hl
	ld	hl, (ix - 66)
	push	hl
	push	iy
	push	de
	ld	hl, (ix - 45)
	push	hl
	call	_clipBehindPlayer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 21)
	jr	BB4_5
BB4_4:
	ld	bc, (ix - 39)
BB4_5:
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB4_7
	ld	hl, (ix - 12)
	ld	de, (ix - 24)
	ld	bc, (ix - 36)
	push	bc
	push	de
	push	hl
	ld	iy, (ix - 54)
	pea	iy + 3
	ld	iy, (ix - 51)
	pea	iy + 3
	ld	iy, (ix - 45)
	pea	iy + 3
	call	_clipBehindPlayer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 21)
BB4_7:
	ld	(ix - 39), bc
	ld	hl, (ix - 12)
	ld	de, 200
	push	de
	pop	bc
	call	__imulu
	ld	de, (ix - 24)
	push	de
	pop	bc
	call	__idivs
	push	hl
	pop	iy
	ld	hl, (_SCWIDTH)
	ld	bc, 2
	call	__idivs
	ld	(ix - 51), hl
	lea	bc, iy
	add	hl, bc
	ld	(ix - 48), hl
	ld	hl, (ix - 36)
	ld	bc, 200
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	ld	(ix - 54), hl
	ld	hl, (_SCHEIGHT)
	ld	(ix - 42), hl
	ld	bc, 2
	call	__idivs
	ld	(ix - 45), hl
	ld	hl, (ix - 9)
	ld	bc, 200
	ld	iy, 200
	call	__imulu
	ld	de, (ix - 39)
	push	de
	pop	bc
	call	__idivs
	ld	bc, (ix - 51)
	add	hl, bc
	ld	(ix - 51), hl
	ld	hl, (ix - 33)
	lea	bc, iy
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	ld	(ix - 57), hl
	ld	de, (ix - 18)
	ld	hl, (ix - 30)
	ld	bc, 200
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	ld	(ix - 60), hl
	ld	de, (ix - 15)
	ld	hl, (ix - 27)
	ld	bc, 200
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	ld	(ix - 63), hl
	ld	hl, (ix - 54)
	ld	de, (ix - 42)
	or	a, a
	sbc	hl, de
	ld	de, (ix - 45)
	add	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 54), hl
	ld	hl, (ix - 45)
	ld	de, (ix - 42)
	or	a, a
	sbc	hl, de
	ld	(ix - 39), hl
	ld	de, (ix - 57)
	add	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 42), hl
	ld	hl, (ix - 39)
	ld	de, (ix - 60)
	add	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 45), hl
	ld	de, (ix - 63)
	ld	hl, (ix - 39)
	add	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 39), hl
	call	_gfx_ZeroScreen
	ld	hl, (ix - 39)
	push	hl
	ld	hl, (ix - 45)
	push	hl
	ld	hl, (ix - 42)
	push	hl
	ld	hl, (ix - 54)
	push	hl
	ld	hl, (ix - 51)
	push	hl
	ld	hl, (ix - 48)
	push	hl
	call	_drawWall
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB4_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gametick
_gametick:
	ld	hl, -6
	call	__frameset
	ld	a, (_k_lf)
	ld	hl, (_P+9)
	bit	0, a
	jr	nz, BB5_2
	push	hl
	pop	iy
	jr	BB5_4
BB5_2:
	ld	de, -2
	push	hl
	pop	iy
	add	iy, de
	ld	(_P+9), iy
	ld	de, 2
	push	hl
	pop	bc
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB5_4
	ld	de, 358
	push	bc
	pop	iy
	add	iy, de
	ld	(_P+9), iy
BB5_4:
	ld	e, 65
	ld	a, (_k_rg)
	bit	0, a
	jr	z, BB5_7
	ld	bc, 2
	lea	hl, iy
	add	hl, bc
	ld	(_P+9), hl
	ld	a, e
	ex	de, hl
	ld	bc, 359
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ex	de, hl
	ld	e, a
	call	pe, __setflag
	jp	m, BB5_8
	ld	bc, -358
	add	iy, bc
	ld	(_P+9), iy
BB5_7:
	lea	hl, iy
BB5_8:
	ld	iy, _M+1440
	ld	c, 2
	call	__ishl
	push	hl
	pop	bc
	ld	(ix - 6), bc
	add	iy, bc
	ld	bc, (iy)
	ld	a, (iy + 3)
	ld	hl, 2097152
	call	__fmul
	call	__ftol
	ld	(ix - 3), bc
	ld	iy, _M
	ld	bc, (ix - 6)
	add	iy, bc
	ld	bc, (iy)
	ld	a, (iy + 3)
	call	__fmul
	call	__ftol
	ld	a, (_k_up)
	bit	0, a
	jr	z, BB5_10
	ld	hl, (_P)
	ld	de, (ix - 3)
	add	hl, de
	ld	(_P), hl
	ld	hl, (_P+3)
	add	hl, bc
	ld	(_P+3), hl
BB5_10:
	ld	a, (_k_dw)
	bit	0, a
	jr	z, BB5_12
	ld	hl, (_P)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(_P), hl
	ld	hl, (_P+3)
	or	a, a
	sbc	hl, bc
	ld	(_P+3), hl
BB5_12:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_kctick
_kctick:
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	b, 3
	call	__bshru
	and	a, 1
	ld	(_k_up), a
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, 1
	ld	(_k_dw), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	srl	a
	and	a, 1
	ld	(_k_lf), a
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	dec	b
	call	__bshru
	and	a, 1
	ld	(_k_rg), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB6_2
	ld	a, 1
	ld	(_ccd), a
BB6_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_init
_init:
	ld	hl, -13
	call	__frameset
	ld	iy, _pi
	or	a, a
	sbc	hl, hl
	ld	de, _M
	ld	(ix - 3), de
	ld	de, 360
	lea	bc, iy + 3
	ld	(ix - 9), bc
	push	hl
	pop	bc
BB7_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB7_3
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix - 6), bc
	ld	bc, (ix - 6)
	ld	a, l
	call	__ltof
	ld	hl, 3407872
	ld	e, 67
	call	__fdiv
	ld	(ix - 12), bc
	ld	(ix - 13), a
	ld	hl, (_pi)
	ld	iy, (ix - 9)
	ld	e, (iy)
	call	__fmul
	ld	l, a
	push	hl
	push	bc
	call	_cos
	pop	bc
	pop	bc
	ld	iy, (ix - 3)
	ld	(iy), hl
	ld	(iy + 3), e
	ld	hl, (_pi)
	ld	a, (_pi+3)
	ld	e, a
	ld	bc, (ix - 12)
	ld	a, (ix - 13)
	call	__fmul
	ld	l, a
	push	hl
	push	bc
	call	_sin
	pop	bc
	pop	bc
	ld	iy, (ix - 3)
	lea	bc, iy + 4
	ld	(ix - 12), bc
	ld	bc, 1440
	add	iy, bc
	ld	bc, (ix - 6)
	ld	(iy), hl
	lea	hl, iy + 3
	ld	(hl), e
	ld	de, 360
	inc	bc
	ld	hl, (ix - 12)
	ld	(ix - 3), hl
	jp	BB7_1
BB7_3:
	ld	hl, 70
	ld	(_P), hl
	ld	hl, -110
	ld	(_P+3), hl
	ld	hl, 20
	ld	(_P+6), hl
	or	a, a
	sbc	hl, hl
	ld	(_P+9), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	_init
BB8_1:
	ld	a, (_ccd)
	bit	0, a
	jr	nz, BB8_3
	call	_draw
	call	_gfx_SwapDraw
	call	_gametick
	call	_kctick
	jr	BB8_1
BB8_3:
	call	_gfx_End
	ld	iy, -3145600
	call	_os_ClrLCD
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	a, (_lost)
	bit	0, a
	jr	z, BB8_5
	ld	hl, _.str
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	iy, -3145600
	call	_os_NewLine
	ld	hl, _.str.1
	push	hl
	call	_os_PutStrFull
	pop	hl
BB8_5:
	call	_os_GetCSC
	or	a, a
	jr	z, BB8_5
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_k_rg
_k_rg:
	rb	1

	section	.bss,"aw",@nobits
	public	_ccd
_ccd:
	rb	1

	section	.bss,"aw",@nobits
	public	_lost
_lost:
	rb	1

	section	.data,"aw",@progbits
	public	_pi
_pi:
	dd	0x40490fd0

	section	.data,"aw",@progbits
	public	_SCWIDTH
_SCWIDTH:
	dl	106

	section	.data,"aw",@progbits
	public	_SCHEIGHT
_SCHEIGHT:
	dl	48

	section	.data,"aw",@progbits
	public	_SCALEFACTOR
_SCALEFACTOR:
	dl	5

	section	.bss,"aw",@nobits
	public	_M
_M:
	rb	2880

	section	.bss,"aw",@nobits
	public	_P
_P:
	rb	12

	section	.bss,"aw",@nobits
	public	_k_lf
_k_lf:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_up
_k_up:
	rb	1

	section	.bss,"aw",@nobits
	public	_k_dw
_k_dw:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"You lost...", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press any key to exit", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6d9aa7a16db70f3d02ae304b08d4a03011281fef)"
	extern	_os_HomeUp
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_gfx_Begin
	extern	__fadd
	extern	_kb_Scan
	extern	_sin
	extern	_os_ClrLCD
	extern	_os_DrawStatusBar
	extern	_gfx_SwapDraw
	extern	__ishl
	extern	__fmul
	extern	__ftol
	extern	__idivs
	extern	_gfx_SetDraw
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__fneg
	extern	_gfx_FillRectangle
	extern	__ixor
	extern	_gfx_ZeroScreen
	extern	_os_PutStrFull
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_os_NewLine
	extern	__ineg
	extern	__ltof
	extern	_os_GetCSC
	extern	__bshru
	extern	__frameset0
	extern	_cos
	extern	__fsub
	extern	_gfx_End
